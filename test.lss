
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000dd4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800076  00800076  00000e7e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000237  00000000  00000000  00000ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000994  00000000  00000000  000010f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000359  00000000  00000000  00001a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d8  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031b  00000000  00000000  000028bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ee  00000000  00000000  00002bd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	32 c3       	rjmp	.+1636   	; 0x66c <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ed       	ldi	r30, 0xD4	; 212
  3a:	fd e0       	ldi	r31, 0x0D	; 13
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 38       	cpi	r26, 0x85	; 133
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c3 d2       	rcall	.+1414   	; 0x5e0 <main>
  5a:	ba c6       	rjmp	.+3444   	; 0xdd0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <NumToString>:

/* Function to convert a number to a zero-terminated char array */
/* Pass it the predefined char array, length including zero terminator and the number to be converted */
/* Returns void because the string is manipulated internally (pass by reference??) */
void NumToString(unsigned char* string, unsigned long length, unsigned long num)
{
  5e:	8f 92       	push	r8
  60:	9f 92       	push	r9
  62:	af 92       	push	r10
  64:	bf 92       	push	r11
  66:	cf 92       	push	r12
  68:	df 92       	push	r13
  6a:	ef 92       	push	r14
  6c:	ff 92       	push	r15
  6e:	0f 93       	push	r16
  70:	1f 93       	push	r17
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  76:	4c 01       	movw	r8, r24
  78:	58 01       	movw	r10, r16
  7a:	69 01       	movw	r12, r18
	int count, temp;
	// start from the least place value position
	for(count = (length - 2); count >= 0; count--)
  7c:	42 50       	subi	r20, 0x02	; 2
  7e:	50 40       	sbci	r21, 0x00	; 0
  80:	7c 01       	movw	r14, r24
  82:	e4 0e       	add	r14, r20
  84:	f5 1e       	adc	r15, r21
  86:	00 e0       	ldi	r16, 0x00	; 0
  88:	10 e0       	ldi	r17, 0x00	; 0

/* Function to convert a number to a zero-terminated char array */
/* Pass it the predefined char array, length including zero terminator and the number to be converted */
/* Returns void because the string is manipulated internally (pass by reference??) */
void NumToString(unsigned char* string, unsigned long length, unsigned long num)
{
  8a:	ea 01       	movw	r28, r20
  8c:	21 96       	adiw	r28, 0x01	; 1
  8e:	16 c0       	rjmp	.+44     	; 0xbc <NumToString+0x5e>
	{
		// find the modulus, the remainder
		temp = num % 10;
		// 0 in ASCII is 48
		// So to convert the int to char, add 48
		string[count] = 48 + temp;
  90:	b5 01       	movw	r22, r10
  92:	c6 01       	movw	r24, r12
  94:	2a e0       	ldi	r18, 0x0A	; 10
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	63 d6       	rcall	.+3270   	; 0xd64 <__udivmodsi4>
  9e:	60 5d       	subi	r22, 0xD0	; 208
  a0:	f7 01       	movw	r30, r14
  a2:	60 83       	st	Z, r22
		// divide by 10
		num = num / 10;
  a4:	b5 01       	movw	r22, r10
  a6:	c6 01       	movw	r24, r12
  a8:	2a e0       	ldi	r18, 0x0A	; 10
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	59 d6       	rcall	.+3250   	; 0xd64 <__udivmodsi4>
  b2:	59 01       	movw	r10, r18
  b4:	6a 01       	movw	r12, r20
  b6:	08 94       	sec
  b8:	e1 08       	sbc	r14, r1
  ba:	f1 08       	sbc	r15, r1
  bc:	0f 5f       	subi	r16, 0xFF	; 255
  be:	1f 4f       	sbci	r17, 0xFF	; 255
/* Returns void because the string is manipulated internally (pass by reference??) */
void NumToString(unsigned char* string, unsigned long length, unsigned long num)
{
	int count, temp;
	// start from the least place value position
	for(count = (length - 2); count >= 0; count--)
  c0:	ce 01       	movw	r24, r28
  c2:	80 1b       	sub	r24, r16
  c4:	91 0b       	sbc	r25, r17
  c6:	97 ff       	sbrs	r25, 7
  c8:	e3 cf       	rjmp	.-58     	; 0x90 <NumToString+0x32>
		string[count] = 48 + temp;
		// divide by 10
		num = num / 10;
	}
	// terminate the char array with the zero
	string[length - 1] = '\0';
  ca:	c8 0d       	add	r28, r8
  cc:	d9 1d       	adc	r29, r9
  ce:	18 82       	st	Y, r1
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	0f 91       	pop	r16
  d8:	ff 90       	pop	r15
  da:	ef 90       	pop	r14
  dc:	df 90       	pop	r13
  de:	cf 90       	pop	r12
  e0:	bf 90       	pop	r11
  e2:	af 90       	pop	r10
  e4:	9f 90       	pop	r9
  e6:	8f 90       	pop	r8
  e8:	08 95       	ret

000000ea <CountDigits>:

/* Function to count the number of digits in any number */
/* Pass it the number */
/* Return the count of digits */
unsigned long CountDigits(unsigned long num)
{
  ea:	ef 92       	push	r14
  ec:	ff 92       	push	r15
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	e2 2e       	mov	r14, r18
  f6:	f1 2c       	mov	r15, r1
  f8:	01 2d       	mov	r16, r1
  fa:	11 2d       	mov	r17, r1
	unsigned long count = 1;
	while(1)
	{
		num = num/10;
  fc:	2a e0       	ldi	r18, 0x0A	; 10
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	2f d6       	rcall	.+3166   	; 0xd64 <__udivmodsi4>
 106:	c9 01       	movw	r24, r18
 108:	da 01       	movw	r26, r20
 10a:	bc 01       	movw	r22, r24
 10c:	cd 01       	movw	r24, r26
		if(num == 0)
 10e:	61 15       	cp	r22, r1
 110:	71 05       	cpc	r23, r1
 112:	81 05       	cpc	r24, r1
 114:	91 05       	cpc	r25, r1
 116:	31 f0       	breq	.+12     	; 0x124 <CountDigits+0x3a>
		{
			break;
		}
		else
		{
			count++;
 118:	08 94       	sec
 11a:	e1 1c       	adc	r14, r1
 11c:	f1 1c       	adc	r15, r1
 11e:	01 1d       	adc	r16, r1
 120:	11 1d       	adc	r17, r1
 122:	ec cf       	rjmp	.-40     	; 0xfc <CountDigits+0x12>
		}
	}
	return count;
}
 124:	b7 01       	movw	r22, r14
 126:	c8 01       	movw	r24, r16
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	08 95       	ret

00000132 <CountChar>:

/* Function to count the number of char in a string */
/* Pass it the string */
/* Return the char count minus zero-terminator */
unsigned long CountChar(unsigned char* string)
{
 132:	bc 01       	movw	r22, r24
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	04 c0       	rjmp	.+8      	; 0x146 <CountChar+0x14>
	unsigned long count = 0;
	while(string[count] != '\0')
	{
		count++;
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	4f 4f       	sbci	r20, 0xFF	; 255
 144:	5f 4f       	sbci	r21, 0xFF	; 255
/* Pass it the string */
/* Return the char count minus zero-terminator */
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
 146:	fb 01       	movw	r30, r22
 148:	e2 0f       	add	r30, r18
 14a:	f3 1f       	adc	r31, r19
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	b1 f7       	brne	.-20     	; 0x13e <CountChar+0xc>
	{
		count++;
	}
	return count;
}
 152:	b9 01       	movw	r22, r18
 154:	ca 01       	movw	r24, r20
 156:	08 95       	ret

00000158 <WriteLine>:
}

/* Function to write a line to serial */
/* Pass it the prefix string, num and suffix string */
void WriteLine(unsigned char* prefix, unsigned long num, unsigned char* suffix)
{
 158:	2f 92       	push	r2
 15a:	3f 92       	push	r3
 15c:	4f 92       	push	r4
 15e:	5f 92       	push	r5
 160:	6f 92       	push	r6
 162:	7f 92       	push	r7
 164:	8f 92       	push	r8
 166:	9f 92       	push	r9
 168:	af 92       	push	r10
 16a:	bf 92       	push	r11
 16c:	cf 92       	push	r12
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	df 93       	push	r29
 17a:	cf 93       	push	r28
 17c:	00 d0       	rcall	.+0      	; 0x17e <WriteLine+0x26>
 17e:	0f 92       	push	r0
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	4c 01       	movw	r8, r24
 186:	7a 01       	movw	r14, r20
 188:	8b 01       	movw	r16, r22
 18a:	39 01       	movw	r6, r18
	
	SerWrite(prefix, CountChar(prefix));
	SerWrite(string, length);
	SerWrite(suffix, CountChar(suffix));
	SerWrite(newline, 2);
 18c:	4d b6       	in	r4, 0x3d	; 61
 18e:	5e b6       	in	r5, 0x3e	; 62

/* Function to write a line to serial */
/* Pass it the prefix string, num and suffix string */
void WriteLine(unsigned char* prefix, unsigned long num, unsigned char* suffix)
{
	unsigned long length = CountDigits(num) + 1;
 190:	cb 01       	movw	r24, r22
 192:	ba 01       	movw	r22, r20
 194:	aa df       	rcall	.-172    	; 0xea <CountDigits>
 196:	5b 01       	movw	r10, r22
 198:	6c 01       	movw	r12, r24
 19a:	08 94       	sec
 19c:	a1 1c       	adc	r10, r1
 19e:	b1 1c       	adc	r11, r1
 1a0:	c1 1c       	adc	r12, r1
 1a2:	d1 1c       	adc	r13, r1
	unsigned char string[length];
 1a4:	8d b7       	in	r24, 0x3d	; 61
 1a6:	9e b7       	in	r25, 0x3e	; 62
 1a8:	8a 19       	sub	r24, r10
 1aa:	9b 09       	sbc	r25, r11
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	9e bf       	out	0x3e, r25	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	8d bf       	out	0x3d, r24	; 61
 1b6:	2d b7       	in	r18, 0x3d	; 61
 1b8:	3e b7       	in	r19, 0x3e	; 62
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
	NumToString(string, length, num);
 1be:	32 2e       	mov	r3, r18
 1c0:	23 2e       	mov	r2, r19
 1c2:	c9 01       	movw	r24, r18
 1c4:	b6 01       	movw	r22, r12
 1c6:	a5 01       	movw	r20, r10
 1c8:	98 01       	movw	r18, r16
 1ca:	87 01       	movw	r16, r14
 1cc:	48 df       	rcall	.-368    	; 0x5e <NumToString>
	unsigned char newline[] = "\n\r";
 1ce:	de 01       	movw	r26, r28
 1d0:	11 96       	adiw	r26, 0x01	; 1
 1d2:	e0 e6       	ldi	r30, 0x60	; 96
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <WriteLine+0x80>
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <WriteLine+0x9a>
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
	{
		count++;
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	4f 4f       	sbci	r20, 0xFF	; 255
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
/* Pass it the string */
/* Return the char count minus zero-terminator */
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
 1f2:	f4 01       	movw	r30, r8
 1f4:	e2 0f       	add	r30, r18
 1f6:	f3 1f       	adc	r31, r19
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	b1 f7       	brne	.-20     	; 0x1ea <WriteLine+0x92>
	unsigned long length = CountDigits(num) + 1;
	unsigned char string[length];
	NumToString(string, length, num);
	unsigned char newline[] = "\n\r";
	
	SerWrite(prefix, CountChar(prefix));
 1fe:	c4 01       	movw	r24, r8
 200:	62 2f       	mov	r22, r18
 202:	0b d3       	rcall	.+1558   	; 0x81a <SerWrite>
	SerWrite(string, length);
 204:	83 2d       	mov	r24, r3
 206:	92 2d       	mov	r25, r2
 208:	6a 2d       	mov	r22, r10
 20a:	07 d3       	rcall	.+1550   	; 0x81a <SerWrite>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	04 c0       	rjmp	.+8      	; 0x21e <WriteLine+0xc6>
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
	{
		count++;
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	4f 4f       	sbci	r20, 0xFF	; 255
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
/* Pass it the string */
/* Return the char count minus zero-terminator */
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
 21e:	f3 01       	movw	r30, r6
 220:	e2 0f       	add	r30, r18
 222:	f3 1f       	adc	r31, r19
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	b1 f7       	brne	.-20     	; 0x216 <WriteLine+0xbe>
	NumToString(string, length, num);
	unsigned char newline[] = "\n\r";
	
	SerWrite(prefix, CountChar(prefix));
	SerWrite(string, length);
	SerWrite(suffix, CountChar(suffix));
 22a:	c3 01       	movw	r24, r6
 22c:	62 2f       	mov	r22, r18
 22e:	f5 d2       	rcall	.+1514   	; 0x81a <SerWrite>
	SerWrite(newline, 2);
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	f1 d2       	rcall	.+1506   	; 0x81a <SerWrite>
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	5e be       	out	0x3e, r5	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	4d be       	out	0x3d, r4	; 61
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	af 90       	pop	r10
 25c:	9f 90       	pop	r9
 25e:	8f 90       	pop	r8
 260:	7f 90       	pop	r7
 262:	6f 90       	pop	r6
 264:	5f 90       	pop	r5
 266:	4f 90       	pop	r4
 268:	3f 90       	pop	r3
 26a:	2f 90       	pop	r2
 26c:	08 95       	ret

0000026e <Write>:
}

/* Function to write to serial */
/* Pass it the prefix string, num and suffix string */
void Write(unsigned char* prefix, unsigned long num, unsigned char* suffix)
{
 26e:	2f 92       	push	r2
 270:	3f 92       	push	r3
 272:	4f 92       	push	r4
 274:	5f 92       	push	r5
 276:	6f 92       	push	r6
 278:	7f 92       	push	r7
 27a:	8f 92       	push	r8
 27c:	9f 92       	push	r9
 27e:	af 92       	push	r10
 280:	bf 92       	push	r11
 282:	cf 92       	push	r12
 284:	df 92       	push	r13
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	df 93       	push	r29
 290:	cf 93       	push	r28
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	4c 01       	movw	r8, r24
 298:	7a 01       	movw	r14, r20
 29a:	8b 01       	movw	r16, r22
 29c:	39 01       	movw	r6, r18
	NumToString(string, length, num);
	
	SerWrite(prefix, CountChar(prefix));
	SerWrite(string, length);
	SerWrite(suffix, CountChar(suffix));
}
 29e:	2d b6       	in	r2, 0x3d	; 61
 2a0:	3e b6       	in	r3, 0x3e	; 62

/* Function to write to serial */
/* Pass it the prefix string, num and suffix string */
void Write(unsigned char* prefix, unsigned long num, unsigned char* suffix)
{
	unsigned long length = CountDigits(num) + 1;
 2a2:	cb 01       	movw	r24, r22
 2a4:	ba 01       	movw	r22, r20
 2a6:	21 df       	rcall	.-446    	; 0xea <CountDigits>
 2a8:	5b 01       	movw	r10, r22
 2aa:	6c 01       	movw	r12, r24
 2ac:	08 94       	sec
 2ae:	a1 1c       	adc	r10, r1
 2b0:	b1 1c       	adc	r11, r1
 2b2:	c1 1c       	adc	r12, r1
 2b4:	d1 1c       	adc	r13, r1
	unsigned char string[length];
 2b6:	8d b7       	in	r24, 0x3d	; 61
 2b8:	9e b7       	in	r25, 0x3e	; 62
 2ba:	8a 19       	sub	r24, r10
 2bc:	9b 09       	sbc	r25, r11
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	9e bf       	out	0x3e, r25	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	8d bf       	out	0x3d, r24	; 61
 2c8:	2d b7       	in	r18, 0x3d	; 61
 2ca:	3e b7       	in	r19, 0x3e	; 62
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
	NumToString(string, length, num);
 2d0:	52 2e       	mov	r5, r18
 2d2:	43 2e       	mov	r4, r19
 2d4:	c9 01       	movw	r24, r18
 2d6:	b6 01       	movw	r22, r12
 2d8:	a5 01       	movw	r20, r10
 2da:	98 01       	movw	r18, r16
 2dc:	87 01       	movw	r16, r14
 2de:	bf de       	rcall	.-642    	; 0x5e <NumToString>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <Write+0x84>
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
	{
		count++;
 2ea:	2f 5f       	subi	r18, 0xFF	; 255
 2ec:	3f 4f       	sbci	r19, 0xFF	; 255
 2ee:	4f 4f       	sbci	r20, 0xFF	; 255
 2f0:	5f 4f       	sbci	r21, 0xFF	; 255
/* Pass it the string */
/* Return the char count minus zero-terminator */
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
 2f2:	f4 01       	movw	r30, r8
 2f4:	e2 0f       	add	r30, r18
 2f6:	f3 1f       	adc	r31, r19
 2f8:	80 81       	ld	r24, Z
 2fa:	88 23       	and	r24, r24
 2fc:	b1 f7       	brne	.-20     	; 0x2ea <Write+0x7c>
{
	unsigned long length = CountDigits(num) + 1;
	unsigned char string[length];
	NumToString(string, length, num);
	
	SerWrite(prefix, CountChar(prefix));
 2fe:	c4 01       	movw	r24, r8
 300:	62 2f       	mov	r22, r18
 302:	8b d2       	rcall	.+1302   	; 0x81a <SerWrite>
	SerWrite(string, length);
 304:	85 2d       	mov	r24, r5
 306:	94 2d       	mov	r25, r4
 308:	6a 2d       	mov	r22, r10
 30a:	87 d2       	rcall	.+1294   	; 0x81a <SerWrite>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	04 c0       	rjmp	.+8      	; 0x31e <Write+0xb0>
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
	{
		count++;
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	4f 4f       	sbci	r20, 0xFF	; 255
 31c:	5f 4f       	sbci	r21, 0xFF	; 255
/* Pass it the string */
/* Return the char count minus zero-terminator */
unsigned long CountChar(unsigned char* string)
{
	unsigned long count = 0;
	while(string[count] != '\0')
 31e:	f3 01       	movw	r30, r6
 320:	e2 0f       	add	r30, r18
 322:	f3 1f       	adc	r31, r19
 324:	80 81       	ld	r24, Z
 326:	88 23       	and	r24, r24
 328:	b1 f7       	brne	.-20     	; 0x316 <Write+0xa8>
	unsigned char string[length];
	NumToString(string, length, num);
	
	SerWrite(prefix, CountChar(prefix));
	SerWrite(string, length);
	SerWrite(suffix, CountChar(suffix));
 32a:	c3 01       	movw	r24, r6
 32c:	62 2f       	mov	r22, r18
 32e:	75 d2       	rcall	.+1258   	; 0x81a <SerWrite>
}
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	3e be       	out	0x3e, r3	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	2d be       	out	0x3d, r2	; 61
 33a:	cf 91       	pop	r28
 33c:	df 91       	pop	r29
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	bf 90       	pop	r11
 34c:	af 90       	pop	r10
 34e:	9f 90       	pop	r9
 350:	8f 90       	pop	r8
 352:	7f 90       	pop	r7
 354:	6f 90       	pop	r6
 356:	5f 90       	pop	r5
 358:	4f 90       	pop	r4
 35a:	3f 90       	pop	r3
 35c:	2f 90       	pop	r2
 35e:	08 95       	ret

00000360 <CompareSpeeds>:
	}
}

// not complete; to compare odometry data to equalise speeds
int CompareSpeeds()
{
 360:	df 93       	push	r29
 362:	cf 93       	push	r28
 364:	00 d0       	rcall	.+0      	; 0x366 <CompareSpeeds+0x6>
 366:	00 d0       	rcall	.+0      	; 0x368 <CompareSpeeds+0x8>
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
	unsigned int odoData[2];
	OdometrieData(odoData);
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	32 d2       	rcall	.+1124   	; 0x7d6 <OdometrieData>
	return MOTOR_BOTH;
}
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	08 95       	ret

00000384 <Decelerate>:

/* Function to decelerate */
/* Min speed is 0 */
void Decelerate(int motorSelect)
{
	switch(motorSelect)
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	91 05       	cpc	r25, r1
 388:	e1 f0       	breq	.+56     	; 0x3c2 <Decelerate+0x3e>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	91 05       	cpc	r25, r1
 38e:	71 f0       	breq	.+28     	; 0x3ac <Decelerate+0x28>
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	11 f5       	brne	.+68     	; 0x3d8 <Decelerate+0x54>
	{
		case MOTOR_LEFT:
			if(speedLeft > 0) speedLeft--;
 394:	80 91 7e 00 	lds	r24, 0x007E
 398:	90 91 7f 00 	lds	r25, 0x007F
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	e1 f0       	breq	.+56     	; 0x3d8 <Decelerate+0x54>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	90 93 7f 00 	sts	0x007F, r25
 3a6:	80 93 7e 00 	sts	0x007E, r24
 3aa:	16 c0       	rjmp	.+44     	; 0x3d8 <Decelerate+0x54>
			break;
		case MOTOR_RIGHT:
			if(speedRight > 0) speedRight--;
			break;
		case MOTOR_BOTH:
			if(speedLeft > 0) speedLeft--;
 3ac:	80 91 7e 00 	lds	r24, 0x007E
 3b0:	90 91 7f 00 	lds	r25, 0x007F
 3b4:	00 97       	sbiw	r24, 0x00	; 0
 3b6:	29 f0       	breq	.+10     	; 0x3c2 <Decelerate+0x3e>
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	90 93 7f 00 	sts	0x007F, r25
 3be:	80 93 7e 00 	sts	0x007E, r24
			if(speedRight > 0) speedRight--;
 3c2:	80 91 78 00 	lds	r24, 0x0078
 3c6:	90 91 79 00 	lds	r25, 0x0079
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	29 f0       	breq	.+10     	; 0x3d8 <Decelerate+0x54>
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	90 93 79 00 	sts	0x0079, r25
 3d4:	80 93 78 00 	sts	0x0078, r24
			break;
	}
	MotorSpeed(speedRight, speedLeft);
 3d8:	80 91 78 00 	lds	r24, 0x0078
 3dc:	60 91 7e 00 	lds	r22, 0x007E
 3e0:	6f d1       	rcall	.+734    	; 0x6c0 <MotorSpeed>
}
 3e2:	08 95       	ret

000003e4 <Accelerate>:

/* Function to increment the motor speed */
/* Max speed is 255 */
void Accelerate(int motorSelect)
{
	switch(motorSelect)
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	91 05       	cpc	r25, r1
 3e8:	f1 f0       	breq	.+60     	; 0x426 <Accelerate+0x42>
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	91 05       	cpc	r25, r1
 3ee:	79 f0       	breq	.+30     	; 0x40e <Accelerate+0x2a>
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	29 f5       	brne	.+74     	; 0x43e <Accelerate+0x5a>
	{
		case MOTOR_LEFT:
			if(speedLeft < 255) speedLeft++;
 3f4:	80 91 7e 00 	lds	r24, 0x007E
 3f8:	90 91 7f 00 	lds	r25, 0x007F
 3fc:	8f 3f       	cpi	r24, 0xFF	; 255
 3fe:	91 05       	cpc	r25, r1
 400:	f0 f4       	brcc	.+60     	; 0x43e <Accelerate+0x5a>
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	90 93 7f 00 	sts	0x007F, r25
 408:	80 93 7e 00 	sts	0x007E, r24
 40c:	18 c0       	rjmp	.+48     	; 0x43e <Accelerate+0x5a>
			break;
		case MOTOR_RIGHT:
			if(speedRight < 255) speedRight++;
			break;
		case MOTOR_BOTH:
			if(speedLeft < 255) speedLeft++;
 40e:	80 91 7e 00 	lds	r24, 0x007E
 412:	90 91 7f 00 	lds	r25, 0x007F
 416:	8f 3f       	cpi	r24, 0xFF	; 255
 418:	91 05       	cpc	r25, r1
 41a:	28 f4       	brcc	.+10     	; 0x426 <Accelerate+0x42>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 7f 00 	sts	0x007F, r25
 422:	80 93 7e 00 	sts	0x007E, r24
			if(speedRight < 255) speedRight++;
 426:	80 91 78 00 	lds	r24, 0x0078
 42a:	90 91 79 00 	lds	r25, 0x0079
 42e:	8f 3f       	cpi	r24, 0xFF	; 255
 430:	91 05       	cpc	r25, r1
 432:	28 f4       	brcc	.+10     	; 0x43e <Accelerate+0x5a>
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	90 93 79 00 	sts	0x0079, r25
 43a:	80 93 78 00 	sts	0x0078, r24
			break;
	}
	MotorSpeed(speedRight, speedLeft);
 43e:	80 91 78 00 	lds	r24, 0x0078
 442:	60 91 7e 00 	lds	r22, 0x007E
 446:	3c d1       	rcall	.+632    	; 0x6c0 <MotorSpeed>
}
 448:	08 95       	ret

0000044a <FollowLine>:
	}
}

// not working as expected
void FollowLine()
{
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	df 93       	push	r29
 450:	cf 93       	push	r28
 452:	00 d0       	rcall	.+0      	; 0x454 <FollowLine+0xa>
 454:	00 d0       	rcall	.+0      	; 0x456 <FollowLine+0xc>
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
	unsigned int lineData[2];
	FrontLED(ON);
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	54 d1       	rcall	.+680    	; 0x706 <FrontLED>
	MotorDir(FWD, FWD);
 45e:	80 e2       	ldi	r24, 0x20	; 32
 460:	60 e2       	ldi	r22, 0x20	; 32
 462:	35 d1       	rcall	.+618    	; 0x6ce <MotorDir>
	MotorSpeed(RUN_SPEED, RUN_SPEED);
 464:	88 ec       	ldi	r24, 0xC8	; 200
 466:	68 ec       	ldi	r22, 0xC8	; 200
 468:	2b d1       	rcall	.+598    	; 0x6c0 <MotorSpeed>
	while(1)
	{
		LineData(lineData);
 46a:	8e 01       	movw	r16, r28
 46c:	0f 5f       	subi	r16, 0xFF	; 255
 46e:	1f 4f       	sbci	r17, 0xFF	; 255
 470:	c8 01       	movw	r24, r16
 472:	93 d1       	rcall	.+806    	; 0x79a <LineData>
		
		if(lineData[0] > (lineData[1]))
 474:	29 81       	ldd	r18, Y+1	; 0x01
 476:	3a 81       	ldd	r19, Y+2	; 0x02
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	9c 81       	ldd	r25, Y+4	; 0x04
 47c:	82 17       	cp	r24, r18
 47e:	93 07       	cpc	r25, r19
 480:	30 f4       	brcc	.+12     	; 0x48e <__stack+0x2f>
		{
			Accelerate(MOTOR_LEFT);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	ae df       	rcall	.-164    	; 0x3e4 <Accelerate>
			Decelerate(MOTOR_RIGHT);
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	05 c0       	rjmp	.+10     	; 0x498 <__stack+0x39>
		}
		else
		{
			Accelerate(MOTOR_RIGHT);
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	a8 df       	rcall	.-176    	; 0x3e4 <Accelerate>
			Decelerate(MOTOR_LEFT);
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	75 df       	rcall	.-278    	; 0x384 <Decelerate>
 49a:	ea cf       	rjmp	.-44     	; 0x470 <__stack+0x11>

0000049c <Manoeuvre>:

/* Function to manoeuvre around obstacles */
/* Pass it the obstacle position */
void Manoeuvre(int obstDir)
{
	switch(obstDir)
 49c:	85 36       	cpi	r24, 0x65	; 101
 49e:	91 05       	cpc	r25, r1
 4a0:	29 f0       	breq	.+10     	; 0x4ac <Manoeuvre+0x10>
 4a2:	86 36       	cpi	r24, 0x66	; 102
 4a4:	91 05       	cpc	r25, r1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <Manoeuvre+0xe>
 4a8:	51 c0       	rjmp	.+162    	; 0x54c <Manoeuvre+0xb0>
 4aa:	1d c0       	rjmp	.+58     	; 0x4e6 <Manoeuvre+0x4a>
	{
		case OBST_LEFT:
			StatusLED(GREEN);
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	18 d1       	rcall	.+560    	; 0x6e0 <StatusLED>
			MotorSpeed(STOP_SPEED, STOP_SPEED);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	05 d1       	rcall	.+522    	; 0x6c0 <MotorSpeed>
			Msleep(100);
 4b6:	84 e6       	ldi	r24, 0x64	; 100
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	2d d2       	rcall	.+1114   	; 0x916 <Msleep>
			MotorDir(RWD, RWD);
 4bc:	80 e1       	ldi	r24, 0x10	; 16
 4be:	60 e1       	ldi	r22, 0x10	; 16
 4c0:	06 d1       	rcall	.+524    	; 0x6ce <MotorDir>
			MotorSpeed(RUN_SPEED, RUN_SPEED);
 4c2:	88 ec       	ldi	r24, 0xC8	; 200
 4c4:	68 ec       	ldi	r22, 0xC8	; 200
 4c6:	fc d0       	rcall	.+504    	; 0x6c0 <MotorSpeed>
			Msleep(1000);
 4c8:	88 ee       	ldi	r24, 0xE8	; 232
 4ca:	93 e0       	ldi	r25, 0x03	; 3
 4cc:	24 d2       	rcall	.+1096   	; 0x916 <Msleep>
			MotorSpeed(STOP_SPEED, STOP_SPEED);
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	f6 d0       	rcall	.+492    	; 0x6c0 <MotorSpeed>
			Msleep(100);
 4d4:	84 e6       	ldi	r24, 0x64	; 100
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	1e d2       	rcall	.+1084   	; 0x916 <Msleep>
			MotorDir(FWD, BREAK);
 4da:	80 e2       	ldi	r24, 0x20	; 32
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	f7 d0       	rcall	.+494    	; 0x6ce <MotorDir>
			MotorSpeed(RUN_SPEED, STOP_SPEED);
 4e0:	88 ec       	ldi	r24, 0xC8	; 200
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	1c c0       	rjmp	.+56     	; 0x51e <Manoeuvre+0x82>
			MotorSpeed(RUN_SPEED, RUN_SPEED);
			
			startAgain = 1;
			break;
		case OBST_RIGHT:
			StatusLED(RED);
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	fb d0       	rcall	.+502    	; 0x6e0 <StatusLED>
			MotorSpeed(STOP_SPEED, STOP_SPEED);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	e8 d0       	rcall	.+464    	; 0x6c0 <MotorSpeed>
			Msleep(100);
 4f0:	84 e6       	ldi	r24, 0x64	; 100
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	10 d2       	rcall	.+1056   	; 0x916 <Msleep>
			MotorDir(RWD, RWD);
 4f6:	80 e1       	ldi	r24, 0x10	; 16
 4f8:	60 e1       	ldi	r22, 0x10	; 16
 4fa:	e9 d0       	rcall	.+466    	; 0x6ce <MotorDir>
			MotorSpeed(RUN_SPEED, RUN_SPEED);
 4fc:	88 ec       	ldi	r24, 0xC8	; 200
 4fe:	68 ec       	ldi	r22, 0xC8	; 200
 500:	df d0       	rcall	.+446    	; 0x6c0 <MotorSpeed>
			Msleep(1000);
 502:	88 ee       	ldi	r24, 0xE8	; 232
 504:	93 e0       	ldi	r25, 0x03	; 3
 506:	07 d2       	rcall	.+1038   	; 0x916 <Msleep>
			MotorSpeed(STOP_SPEED, STOP_SPEED);
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	d9 d0       	rcall	.+434    	; 0x6c0 <MotorSpeed>
			Msleep(100);
 50e:	84 e6       	ldi	r24, 0x64	; 100
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	01 d2       	rcall	.+1026   	; 0x916 <Msleep>
			MotorDir(BREAK, FWD);
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	60 e2       	ldi	r22, 0x20	; 32
 518:	da d0       	rcall	.+436    	; 0x6ce <MotorDir>
			MotorSpeed(STOP_SPEED, RUN_SPEED);
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	68 ec       	ldi	r22, 0xC8	; 200
 51e:	d0 d0       	rcall	.+416    	; 0x6c0 <MotorSpeed>
			Msleep(1000);
 520:	88 ee       	ldi	r24, 0xE8	; 232
 522:	93 e0       	ldi	r25, 0x03	; 3
 524:	f8 d1       	rcall	.+1008   	; 0x916 <Msleep>
			MotorSpeed(STOP_SPEED, STOP_SPEED);
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	ca d0       	rcall	.+404    	; 0x6c0 <MotorSpeed>
			Msleep(100);
 52c:	84 e6       	ldi	r24, 0x64	; 100
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	f2 d1       	rcall	.+996    	; 0x916 <Msleep>
			MotorDir(FWD, FWD);
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	60 e2       	ldi	r22, 0x20	; 32
 536:	cb d0       	rcall	.+406    	; 0x6ce <MotorDir>
			MotorSpeed(RUN_SPEED, RUN_SPEED);
 538:	88 ec       	ldi	r24, 0xC8	; 200
 53a:	68 ec       	ldi	r22, 0xC8	; 200
 53c:	c1 d0       	rcall	.+386    	; 0x6c0 <MotorSpeed>
			
			startAgain = 1;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	90 93 77 00 	sts	0x0077, r25
 546:	80 93 76 00 	sts	0x0076, r24
 54a:	08 95       	ret
			break;
		case OBST_NONE:
		default:
			StatusLED(OFF);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	c8 d0       	rcall	.+400    	; 0x6e0 <StatusLED>
			MotorDir(FWD, FWD);
 550:	80 e2       	ldi	r24, 0x20	; 32
 552:	60 e2       	ldi	r22, 0x20	; 32
 554:	bc d0       	rcall	.+376    	; 0x6ce <MotorDir>
			if(startAgain)
 556:	80 91 76 00 	lds	r24, 0x0076
 55a:	90 91 77 00 	lds	r25, 0x0077
 55e:	89 2b       	or	r24, r25
 560:	51 f0       	breq	.+20     	; 0x576 <Manoeuvre+0xda>
			{
				speedLeft = speedRight = RUN_SPEED;
 562:	88 ec       	ldi	r24, 0xC8	; 200
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	90 93 79 00 	sts	0x0079, r25
 56a:	80 93 78 00 	sts	0x0078, r24
 56e:	90 93 7f 00 	sts	0x007F, r25
 572:	80 93 7e 00 	sts	0x007E, r24
			}
			Accelerate(MOTOR_BOTH);
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	34 df       	rcall	.-408    	; 0x3e4 <Accelerate>
			startAgain = 0;
 57c:	10 92 77 00 	sts	0x0077, r1
 580:	10 92 76 00 	sts	0x0076, r1
 584:	08 95       	ret

00000586 <GetSingleObstacleDir>:
/* Function to determine the obstacle position based on switch polling */
/* The value is not very accurate due to capacitor charge/discharge time */
/* Return an enum of type obstacle */
int GetSingleObstacleDir()
{
	int switchState = PollSwitch();
 586:	80 d1       	rcall	.+768    	; 0x888 <PollSwitch>
	Msleep(5);
 588:	85 e0       	ldi	r24, 0x05	; 5
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	c4 d1       	rcall	.+904    	; 0x916 <Msleep>
	switchState = PollSwitch();
 58e:	7c d1       	rcall	.+760    	; 0x888 <PollSwitch>
 590:	90 e0       	ldi	r25, 0x00	; 0
	if(switchState == 0)
 592:	00 97       	sbiw	r24, 0x00	; 0
 594:	19 f4       	brne	.+6      	; 0x59c <GetSingleObstacleDir+0x16>
 596:	24 e6       	ldi	r18, 0x64	; 100
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <GetSingleObstacleDir+0x24>
	{
		return OBST_NONE;
	}
	else if(switchState < 8)
 59c:	08 97       	sbiw	r24, 0x08	; 8
 59e:	1c f0       	brlt	.+6      	; 0x5a6 <GetSingleObstacleDir+0x20>
 5a0:	25 e6       	ldi	r18, 0x65	; 101
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <GetSingleObstacleDir+0x24>
 5a6:	26 e6       	ldi	r18, 0x66	; 102
 5a8:	30 e0       	ldi	r19, 0x00	; 0
		// No switch.
		case 0:
		default:
			return OBST_NONE;
	}*/
}
 5aa:	c9 01       	movw	r24, r18
 5ac:	08 95       	ret

000005ae <GetPreciseObstPosition>:

/* Function to determine a more precise obstacle position */
/* Does [10] runs, then gets the average, rounding it down */
/* Returns an enum of type obstacle */
int GetPreciseObstPosition()
{
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	00 e0       	ldi	r16, 0x00	; 0
 5b8:	10 e0       	ldi	r17, 0x00	; 0
 5ba:	c0 e0       	ldi	r28, 0x00	; 0
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
	int trialRuns = 0, count, runs = 10;
	for(count = 0; count < runs; count++)
	{
		trialRuns += GetSingleObstacleDir();
 5be:	e3 df       	rcall	.-58     	; 0x586 <GetSingleObstacleDir>
 5c0:	08 0f       	add	r16, r24
 5c2:	19 1f       	adc	r17, r25
/* Does [10] runs, then gets the average, rounding it down */
/* Returns an enum of type obstacle */
int GetPreciseObstPosition()
{
	int trialRuns = 0, count, runs = 10;
	for(count = 0; count < runs; count++)
 5c4:	21 96       	adiw	r28, 0x01	; 1
 5c6:	ca 30       	cpi	r28, 0x0A	; 10
 5c8:	d1 05       	cpc	r29, r1
 5ca:	c9 f7       	brne	.-14     	; 0x5be <GetPreciseObstPosition+0x10>
 5cc:	c8 01       	movw	r24, r16
 5ce:	6a e0       	ldi	r22, 0x0A	; 10
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	b5 d3       	rcall	.+1898   	; 0xd3e <__divmodhi4>
 5d4:	cb 01       	movw	r24, r22
	{
		trialRuns += GetSingleObstacleDir();
	}
	return (trialRuns / runs);
}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	08 95       	ret

000005e0 <main>:
unsigned int speedRight, speedLeft;
unsigned int dirRight, dirLeft;
int startAgain = 0;

int main(void)
{
 5e0:	cf 92       	push	r12
 5e2:	df 92       	push	r13
 5e4:	ef 92       	push	r14
 5e6:	ff 92       	push	r15
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	df 93       	push	r29
 5ee:	cf 93       	push	r28
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	63 97       	sbiw	r28, 0x13	; 19
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	f8 94       	cli
 5fa:	de bf       	out	0x3e, r29	; 62
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	cd bf       	out	0x3d, r28	; 61
	Init();
 600:	9e d0       	rcall	.+316    	; 0x73e <Init>
	int obstDir = OBST_NONE;
	speedLeft = speedRight = RUN_SPEED;
 602:	88 ec       	ldi	r24, 0xC8	; 200
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	90 93 79 00 	sts	0x0079, r25
 60a:	80 93 78 00 	sts	0x0078, r24
 60e:	90 93 7f 00 	sts	0x007F, r25
 612:	80 93 7e 00 	sts	0x007E, r24
	dirLeft = dirRight = FWD;
 616:	80 e2       	ldi	r24, 0x20	; 32
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	90 93 7d 00 	sts	0x007D, r25
 61e:	80 93 7c 00 	sts	0x007C, r24
 622:	90 93 7b 00 	sts	0x007B, r25
 626:	80 93 7a 00 	sts	0x007A, r24
		
	while(1)
	{
		obstDir = GetPreciseObstPosition();
		
		unsigned char prefix[] = "Obstacle position";
 62a:	32 e0       	ldi	r19, 0x02	; 2
 62c:	e3 2e       	mov	r14, r19
 62e:	f1 2c       	mov	r15, r1
 630:	ec 0e       	add	r14, r28
 632:	fd 1e       	adc	r15, r29
		unsigned char suffix[] = "";
		WriteLine(prefix, obstDir, suffix);
 634:	6e 01       	movw	r12, r28
 636:	08 94       	sec
 638:	c1 1c       	adc	r12, r1
 63a:	d1 1c       	adc	r13, r1
	speedLeft = speedRight = RUN_SPEED;
	dirLeft = dirRight = FWD;
		
	while(1)
	{
		obstDir = GetPreciseObstPosition();
 63c:	b8 df       	rcall	.-144    	; 0x5ae <GetPreciseObstPosition>
 63e:	8c 01       	movw	r16, r24
		
		unsigned char prefix[] = "Obstacle position";
 640:	d7 01       	movw	r26, r14
 642:	e3 e6       	ldi	r30, 0x63	; 99
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	82 e1       	ldi	r24, 0x12	; 18
 648:	01 90       	ld	r0, Z+
 64a:	0d 92       	st	X+, r0
 64c:	81 50       	subi	r24, 0x01	; 1
 64e:	e1 f7       	brne	.-8      	; 0x648 <main+0x68>
		unsigned char suffix[] = "";
 650:	80 91 75 00 	lds	r24, 0x0075
 654:	89 83       	std	Y+1, r24	; 0x01
		WriteLine(prefix, obstDir, suffix);
 656:	a8 01       	movw	r20, r16
 658:	66 27       	eor	r22, r22
 65a:	57 fd       	sbrc	r21, 7
 65c:	60 95       	com	r22
 65e:	76 2f       	mov	r23, r22
 660:	c7 01       	movw	r24, r14
 662:	96 01       	movw	r18, r12
 664:	79 dd       	rcall	.-1294   	; 0x158 <WriteLine>
		Manoeuvre(obstDir);
 666:	c8 01       	movw	r24, r16
 668:	19 df       	rcall	.-462    	; 0x49c <Manoeuvre>
 66a:	e8 cf       	rjmp	.-48     	; 0x63c <main+0x5c>

0000066c <__vector_3>:
volatile unsigned long timebase;

/* uses timer2 (36kHz for IR communication */
/* counts falling and rising edge => 36kHz*2 = 72kHz */
SIGNAL (SIG_OUTPUT_COMPARE2)
{
 66c:	1f 92       	push	r1
 66e:	0f 92       	push	r0
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	af 93       	push	r26
 67c:	bf 93       	push	r27
	count72kHz ++;
 67e:	80 91 80 00 	lds	r24, 0x0080
 682:	8f 5f       	subi	r24, 0xFF	; 255
 684:	80 93 80 00 	sts	0x0080, r24
	timebase++;
 688:	80 91 81 00 	lds	r24, 0x0081
 68c:	90 91 82 00 	lds	r25, 0x0082
 690:	a0 91 83 00 	lds	r26, 0x0083
 694:	b0 91 84 00 	lds	r27, 0x0084
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	a1 1d       	adc	r26, r1
 69c:	b1 1d       	adc	r27, r1
 69e:	80 93 81 00 	sts	0x0081, r24
 6a2:	90 93 82 00 	sts	0x0082, r25
 6a6:	a0 93 83 00 	sts	0x0083, r26
 6aa:	b0 93 84 00 	sts	0x0084, r27
}
 6ae:	bf 91       	pop	r27
 6b0:	af 91       	pop	r26
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <MotorSpeed>:
}

/* Set motor speed */
inline void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	9b bd       	out	0x2b, r25	; 43
 6c4:	8a bd       	out	0x2a, r24	; 42
	OCR1B = right_speed;
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	79 bd       	out	0x29, r23	; 41
 6ca:	68 bd       	out	0x28, r22	; 40
}
 6cc:	08 95       	ret

000006ce <MotorDir>:

/* Set motor direction */
inline void MotorDir(unsigned char left_dir, unsigned char right_dir)
{
	PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
 6ce:	92 b3       	in	r25, 0x12	; 18
 6d0:	9f 7c       	andi	r25, 0xCF	; 207
 6d2:	98 2b       	or	r25, r24
 6d4:	92 bb       	out	0x12, r25	; 18
	PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
 6d6:	88 b3       	in	r24, 0x18	; 24
 6d8:	8f 7c       	andi	r24, 0xCF	; 207
 6da:	86 2b       	or	r24, r22
 6dc:	88 bb       	out	0x18, r24	; 24
}
 6de:	08 95       	ret

000006e0 <StatusLED>:
/* Status LED (OFF,GREEN,YELLOW,RED)*/
/* example code set StatusLED GREEN */
/* StatusLED(GREEN); */
inline void StatusLED(unsigned char color)
{
	if (color == OFF)    {GREEN_LED_OFF; RED_LED_OFF;}
 6e0:	88 23       	and	r24, r24
 6e2:	11 f4       	brne	.+4      	; 0x6e8 <StatusLED+0x8>
 6e4:	c0 98       	cbi	0x18, 0	; 24
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <StatusLED+0xe>
	if (color == GREEN)  {GREEN_LED_ON; RED_LED_OFF;} 
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	19 f4       	brne	.+6      	; 0x6f2 <StatusLED+0x12>
 6ec:	c0 9a       	sbi	0x18, 0	; 24
 6ee:	92 98       	cbi	0x12, 2	; 18
 6f0:	08 95       	ret
	if (color == YELLOW) {GREEN_LED_ON; RED_LED_ON;}
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	19 f4       	brne	.+6      	; 0x6fc <StatusLED+0x1c>
 6f6:	c0 9a       	sbi	0x18, 0	; 24
 6f8:	92 9a       	sbi	0x12, 2	; 18
 6fa:	08 95       	ret
	if (color == RED)    {GREEN_LED_OFF; RED_LED_ON;}
 6fc:	82 30       	cpi	r24, 0x02	; 2
 6fe:	11 f4       	brne	.+4      	; 0x704 <StatusLED+0x24>
 700:	c0 98       	cbi	0x18, 0	; 24
 702:	92 9a       	sbi	0x12, 2	; 18
 704:	08 95       	ret

00000706 <FrontLED>:
/* Front LED */
/* example code FrontLED ON */
/* FrontLED(ON); */
inline void FrontLED(unsigned char status)
{
	PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
 706:	92 b3       	in	r25, 0x12	; 18
 708:	82 95       	swap	r24
 70a:	88 0f       	add	r24, r24
 70c:	88 0f       	add	r24, r24
 70e:	80 7c       	andi	r24, 0xC0	; 192
 710:	9f 7b       	andi	r25, 0xBF	; 191
 712:	98 2b       	or	r25, r24
 714:	92 bb       	out	0x12, r25	; 18
}
 716:	08 95       	ret

00000718 <BackLED>:

/* function for Break LEDs */
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
 718:	98 2f       	mov	r25, r24
	if (left || right) {
 71a:	88 23       	and	r24, r24
 71c:	11 f4       	brne	.+4      	; 0x722 <BackLED+0xa>
 71e:	66 23       	and	r22, r22
 720:	49 f0       	breq	.+18     	; 0x734 <BackLED+0x1c>
		PORTD &= ~(1 << PD7); // Wheel LED OFF
 722:	97 98       	cbi	0x12, 7	; 18
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
 724:	84 b3       	in	r24, 0x14	; 20
 726:	83 60       	ori	r24, 0x03	; 3
 728:	84 bb       	out	0x14, r24	; 20
		PORTC |= (1 << PC0) | (1 << PC1);
 72a:	85 b3       	in	r24, 0x15	; 21
 72c:	83 60       	ori	r24, 0x03	; 3
 72e:	85 bb       	out	0x15, r24	; 21
	}
	if (!left) PORTC &= ~(1 << PC1);
 730:	99 23       	and	r25, r25
 732:	09 f4       	brne	.+2      	; 0x736 <BackLED+0x1e>
 734:	a9 98       	cbi	0x15, 1	; 21
	if (!right) PORTC &= ~(1 << PC0);
 736:	66 23       	and	r22, r22
 738:	09 f4       	brne	.+2      	; 0x73c <BackLED+0x24>
 73a:	a8 98       	cbi	0x15, 0	; 21
 73c:	08 95       	ret

0000073e <Init>:
/* Init function Processor will be initalized to work correctly */
void Init (void)
{
	//-------- seriell interface programmed in boot routine and already running -------
	//  prepare 36kHz for IR - Communication
	TCCR2 = (1 << WGM21) | (1 << COM20) | (1 << CS20);
 73e:	89 e1       	ldi	r24, 0x19	; 25
 740:	85 bd       	out	0x25, r24	; 37
	OCR2  = 0x6E; // 36kHz @8MHz
 742:	8e e6       	ldi	r24, 0x6E	; 110
 744:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2); // 36kHz counter for sleep
 746:	89 b7       	in	r24, 0x39	; 57
 748:	80 68       	ori	r24, 0x80	; 128
 74a:	89 bf       	out	0x39, r24	; 57
	
	// prepare RS232 
	UCSRA = 0x00;
 74c:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;	
 74e:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x86; // No Parity | 1 Stop Bit | 8 Data Bit
 750:	96 e8       	ldi	r25, 0x86	; 134
 752:	90 bd       	out	0x20, r25	; 32
	UBRRL = 0xCF; // 2400bps @ 8.00MHz
 754:	8f ec       	ldi	r24, 0xCF	; 207
 756:	89 b9       	out	0x09, r24	; 9
	
	// I/O Ports
	DDRB = IRTX | LEFT_DIR | PWM | GREEN_LED; 
 758:	8f e3       	ldi	r24, 0x3F	; 63
 75a:	87 bb       	out	0x17, r24	; 23
	DDRD = RIGHT_DIR | FRONT_LED | ODOMETRIE_LED | RED_LED;
 75c:	84 ef       	ldi	r24, 0xF4	; 244
 75e:	81 bb       	out	0x11, r24	; 17
	
	// for PWM (8-Bit PWM) on OC1A & OC1B
	TCCR1A = (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 760:	81 ea       	ldi	r24, 0xA1	; 161
 762:	8f bd       	out	0x2f, r24	; 47
	// tmr1 running on MCU clock/8 
	TCCR1B = (1 << CS11);
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	8e bd       	out	0x2e, r24	; 46
	
	// A/D Conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // clk/64 
 768:	96 b9       	out	0x06, r25	; 6
	ODOMETRIE_LED_OFF;
 76a:	97 98       	cbi	0x12, 7	; 18
/* Front LED */
/* example code FrontLED ON */
/* FrontLED(ON); */
inline void FrontLED(unsigned char status)
{
	PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
 76c:	96 98       	cbi	0x12, 6	; 18
	// A/D Conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // clk/64 
	ODOMETRIE_LED_OFF;

	FrontLED(OFF);
	BackLED(ON,ON);
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	d2 df       	rcall	.-92     	; 0x718 <BackLED>
	BackLED(OFF,OFF);
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	cf df       	rcall	.-98     	; 0x718 <BackLED>
	StatusLED(GREEN);
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	b1 df       	rcall	.-158    	; 0x6e0 <StatusLED>
}

/* Set motor direction */
inline void MotorDir(unsigned char left_dir, unsigned char right_dir)
{
	PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
 77e:	82 b3       	in	r24, 0x12	; 18
 780:	8f 7c       	andi	r24, 0xCF	; 207
 782:	80 62       	ori	r24, 0x20	; 32
 784:	82 bb       	out	0x12, r24	; 18
	PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
 786:	88 b3       	in	r24, 0x18	; 24
 788:	8f 7c       	andi	r24, 0xCF	; 207
 78a:	80 62       	ori	r24, 0x20	; 32
 78c:	88 bb       	out	0x18, r24	; 24
}

/* Set motor speed */
inline void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
 78e:	1b bc       	out	0x2b, r1	; 43
 790:	1a bc       	out	0x2a, r1	; 42
	OCR1B = right_speed;
 792:	19 bc       	out	0x29, r1	; 41
 794:	18 bc       	out	0x28, r1	; 40
	BackLED(OFF,OFF);
	StatusLED(GREEN);
	
	MotorDir(FWD,FWD);
	MotorSpeed(0,0);
	sei();
 796:	78 94       	sei
}
 798:	08 95       	ret

0000079a <LineData>:
	if (!right) PORTC &= ~(1 << PC0);
}

/* function to read out line follow phototransistors (left,rigth) */
void LineData(unsigned int *data)
{
 79a:	fc 01       	movw	r30, r24
	ADMUX = (1 << REFS0) | IR_LEFT;	// AVCC reference with external capacitor
 79c:	83 e4       	ldi	r24, 0x43	; 67
 79e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 7a0:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 7a2:	34 9b       	sbis	0x06, 4	; 6
 7a4:	fe cf       	rjmp	.-4      	; 0x7a2 <LineData+0x8>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 7a6:	34 9a       	sbi	0x06, 4	; 6
	data[0] = ADCL + (ADCH << 8);
 7a8:	34 b1       	in	r19, 0x04	; 4
 7aa:	25 b1       	in	r18, 0x05	; 5
 7ac:	92 2f       	mov	r25, r18
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	83 0f       	add	r24, r19
 7b2:	91 1d       	adc	r25, r1
 7b4:	91 83       	std	Z+1, r25	; 0x01
 7b6:	80 83       	st	Z, r24
	
	ADMUX = (1 << REFS0) | IR_RIGHT;	// AVCC reference with external capacitor
 7b8:	82 e4       	ldi	r24, 0x42	; 66
 7ba:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 7bc:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 7be:	34 9b       	sbis	0x06, 4	; 6
 7c0:	fe cf       	rjmp	.-4      	; 0x7be <LineData+0x24>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 7c2:	34 9a       	sbi	0x06, 4	; 6
	data[1] = ADCL + (ADCH << 8);
 7c4:	34 b1       	in	r19, 0x04	; 4
 7c6:	25 b1       	in	r18, 0x05	; 5
 7c8:	92 2f       	mov	r25, r18
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	83 0f       	add	r24, r19
 7ce:	91 1d       	adc	r25, r1
 7d0:	93 83       	std	Z+3, r25	; 0x03
 7d2:	82 83       	std	Z+2, r24	; 0x02
}
 7d4:	08 95       	ret

000007d6 <OdometrieData>:

/* function to read out odometrie phototransistors (left,rigth) */
void OdometrieData(unsigned int *data)
{
 7d6:	fc 01       	movw	r30, r24
	DDRC &= ~((1 << PC0) | (1 << PC1)); // Input => no break LED
 7d8:	84 b3       	in	r24, 0x14	; 20
 7da:	8c 7f       	andi	r24, 0xFC	; 252
 7dc:	84 bb       	out	0x14, r24	; 20
	ODOMETRIE_LED_ON;
 7de:	97 9a       	sbi	0x12, 7	; 18
	
	ADMUX = (1 << REFS0) | WHEEL_LEFT; // AVCC reference with external capacitor
 7e0:	81 e4       	ldi	r24, 0x41	; 65
 7e2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 7e4:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 7e6:	34 9b       	sbis	0x06, 4	; 6
 7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <OdometrieData+0x10>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 7ea:	34 9a       	sbi	0x06, 4	; 6
	data[0] = ADCL + (ADCH << 8);
 7ec:	34 b1       	in	r19, 0x04	; 4
 7ee:	25 b1       	in	r18, 0x05	; 5
 7f0:	92 2f       	mov	r25, r18
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	83 0f       	add	r24, r19
 7f6:	91 1d       	adc	r25, r1
 7f8:	91 83       	std	Z+1, r25	; 0x01
 7fa:	80 83       	st	Z, r24
	
	ADMUX = (1 << REFS0) | WHEEL_RIGHT; // AVCC reference with external capacitor
 7fc:	80 e4       	ldi	r24, 0x40	; 64
 7fe:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 800:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 802:	34 9b       	sbis	0x06, 4	; 6
 804:	fe cf       	rjmp	.-4      	; 0x802 <OdometrieData+0x2c>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 806:	34 9a       	sbi	0x06, 4	; 6
	data[1] = ADCL + (ADCH << 8);
 808:	34 b1       	in	r19, 0x04	; 4
 80a:	25 b1       	in	r18, 0x05	; 5
 80c:	92 2f       	mov	r25, r18
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	83 0f       	add	r24, r19
 812:	91 1d       	adc	r25, r1
 814:	93 83       	std	Z+3, r25	; 0x03
 816:	82 83       	std	Z+2, r24	; 0x02
}
 818:	08 95       	ret

0000081a <SerWrite>:

/* function for serial communication */
void SerWrite(unsigned char *data,unsigned char length)
{
	unsigned char i = 0;
	UCSRB = 0x08; // enable transmitter
 81a:	28 e0       	ldi	r18, 0x08	; 8
 81c:	2a b9       	out	0x0a, r18	; 10
 81e:	fc 01       	movw	r30, r24
 820:	05 c0       	rjmp	.+10     	; 0x82c <SerWrite+0x12>
	while (length > 0) {
		if (UCSRA & 0x20) { // wait for empty transmit buffer
 822:	5d 9b       	sbis	0x0b, 5	; 11
 824:	fe cf       	rjmp	.-4      	; 0x822 <SerWrite+0x8>
			UDR = data[i++];
 826:	81 91       	ld	r24, Z+
 828:	8c b9       	out	0x0c, r24	; 12
			length --;
 82a:	61 50       	subi	r22, 0x01	; 1
/* function for serial communication */
void SerWrite(unsigned char *data,unsigned char length)
{
	unsigned char i = 0;
	UCSRB = 0x08; // enable transmitter
	while (length > 0) {
 82c:	66 23       	and	r22, r22
 82e:	c9 f7       	brne	.-14     	; 0x822 <SerWrite+0x8>
		if (UCSRA & 0x20) { // wait for empty transmit buffer
			UDR = data[i++];
			length --;
		}
	}
	while (!(UCSRA & 0x40)); 
 830:	5e 9b       	sbis	0x0b, 6	; 11
 832:	fe cf       	rjmp	.-4      	; 0x830 <SerWrite+0x16>
	for (i = 0; i < 0xFE; i++)
		for(length = 0; length < 0xFE; length++); 
}
 834:	08 95       	ret

00000836 <SerRead>:

void SerRead(unsigned char *data, unsigned char length,unsigned int timeout)
{
 836:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	unsigned int  time = 0;
	UCSRB = 0x10; // enable receiver
 838:	80 e1       	ldi	r24, 0x10	; 16
 83a:	8a b9       	out	0x0a, r24	; 10
	/* non blocking */
	if (timeout != 0) {
 83c:	41 15       	cp	r20, r1
 83e:	51 05       	cpc	r21, r1
 840:	11 f4       	brne	.+4      	; 0x846 <SerRead+0x10>
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	1e c0       	rjmp	.+60     	; 0x882 <SerRead+0x4c>
 846:	df 01       	movw	r26, r30
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	05 c0       	rjmp	.+10     	; 0x856 <SerRead+0x20>
		while (i < length && time++ < timeout) {
			if (UCSRA & 0x80) {
 84c:	5f 9b       	sbis	0x0b, 7	; 11
 84e:	07 c0       	rjmp	.+14     	; 0x85e <SerRead+0x28>
				data[i++] = UDR;
 850:	8c b1       	in	r24, 0x0c	; 12
 852:	8d 93       	st	X+, r24
 854:	7f 5f       	subi	r23, 0xFF	; 255
	unsigned char i = 0;
	unsigned int  time = 0;
	UCSRB = 0x10; // enable receiver
	/* non blocking */
	if (timeout != 0) {
		while (i < length && time++ < timeout) {
 856:	76 17       	cp	r23, r22
 858:	b0 f4       	brcc	.+44     	; 0x886 <SerRead+0x50>
 85a:	20 e0       	ldi	r18, 0x00	; 0
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	2f 5f       	subi	r18, 0xFF	; 255
 860:	3f 4f       	sbci	r19, 0xFF	; 255
 862:	c9 01       	movw	r24, r18
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	84 17       	cp	r24, r20
 868:	95 07       	cpc	r25, r21
 86a:	80 f3       	brcs	.-32     	; 0x84c <SerRead+0x16>
			if (UCSRA & 0x80) {
				data[i++] = UDR;
				time = 0;
			}
		}
		if (time > timeout) data[0] = 'T';
 86c:	42 17       	cp	r20, r18
 86e:	53 07       	cpc	r21, r19
 870:	50 f4       	brcc	.+20     	; 0x886 <SerRead+0x50>
 872:	84 e5       	ldi	r24, 0x54	; 84
 874:	80 83       	st	Z, r24
 876:	08 95       	ret
	}
	/* blocking */
	else {
		while (i < length) {
			if (UCSRA & 0x80) 
 878:	5f 9b       	sbis	0x0b, 7	; 11
 87a:	fe cf       	rjmp	.-4      	; 0x878 <SerRead+0x42>
				data[i++] = UDR;
 87c:	8c b1       	in	r24, 0x0c	; 12
 87e:	81 93       	st	Z+, r24
 880:	9f 5f       	subi	r25, 0xFF	; 255
		}
		if (time > timeout) data[0] = 'T';
	}
	/* blocking */
	else {
		while (i < length) {
 882:	96 17       	cp	r25, r22
 884:	c8 f3       	brcs	.-14     	; 0x878 <SerRead+0x42>
 886:	08 95       	ret

00000888 <PollSwitch>:
/* function to read out switches */
unsigned char PollSwitch (void)
{
	unsigned int i;
	
	DDRD |= SWITCHES;				// Switches as Output
 888:	8b 9a       	sbi	0x11, 3	; 17
	SWITCH_ON;						// Output HIGH for measurement
 88a:	93 9a       	sbi	0x12, 3	; 18
	ADMUX = (1 << REFS0) | SWITCH;	// AVCC reference with external capacitor
 88c:	84 e4       	ldi	r24, 0x44	; 68
 88e:	87 b9       	out	0x07, r24	; 7
}

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
	count72kHz = 0;
 890:	10 92 80 00 	sts	0x0080, r1
	while (count72kHz < time72kHz);
 894:	80 91 80 00 	lds	r24, 0x0080
 898:	8a 30       	cpi	r24, 0x0A	; 10
 89a:	e0 f3       	brcs	.-8      	; 0x894 <PollSwitch+0xc>
	DDRD |= SWITCHES;				// Switches as Output
	SWITCH_ON;						// Output HIGH for measurement
	ADMUX = (1 << REFS0) | SWITCH;	// AVCC reference with external capacitor
	Sleep(10);
	
	ADCSRA |= (1 << ADSC);			// Start conversion
 89c:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));// wait for conversion complete
 89e:	34 9b       	sbis	0x06, 4	; 6
 8a0:	fe cf       	rjmp	.-4      	; 0x89e <PollSwitch+0x16>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 8a2:	34 9a       	sbi	0x06, 4	; 6
	i = ADCL + (ADCH << 8);
 8a4:	34 b1       	in	r19, 0x04	; 4
 8a6:	25 b1       	in	r18, 0x05	; 5
	
	SWITCH_OFF;
 8a8:	93 98       	cbi	0x12, 3	; 18
 8aa:	72 2f       	mov	r23, r18
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	63 0f       	add	r22, r19
 8b0:	71 1d       	adc	r23, r1
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	52 d1       	rcall	.+676    	; 0xb5c <__floatunsisf>
 8b8:	9b 01       	movw	r18, r22
 8ba:	ac 01       	movw	r20, r24
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	80 e8       	ldi	r24, 0x80	; 128
 8c2:	94 e4       	ldi	r25, 0x44	; 68
 8c4:	b7 d0       	rcall	.+366    	; 0xa34 <__divsf3>
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	40 e8       	ldi	r20, 0x80	; 128
 8cc:	5f e3       	ldi	r21, 0x3F	; 63
 8ce:	4d d0       	rcall	.+154    	; 0x96a <__subsf3>
 8d0:	20 e0       	ldi	r18, 0x00	; 0
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	4c e7       	ldi	r20, 0x7C	; 124
 8d6:	52 e4       	ldi	r21, 0x42	; 66
 8d8:	cf d1       	rcall	.+926    	; 0xc78 <__mulsf3>
 8da:	20 e0       	ldi	r18, 0x00	; 0
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	40 e0       	ldi	r20, 0x00	; 0
 8e0:	5f e3       	ldi	r21, 0x3F	; 63
 8e2:	44 d0       	rcall	.+136    	; 0x96c <__addsf3>
 8e4:	0f d1       	rcall	.+542    	; 0xb04 <__fixunssfsi>
 8e6:	dc 01       	movw	r26, r24
 8e8:	cb 01       	movw	r24, r22

	return  ((unsigned char) ((( 1024.0/(float)i - 1.0)) * 63.0 + 0.5));
}
 8ea:	08 95       	ret

000008ec <StartSwitch>:

/* for working with Interrupt */
void StartSwitch(void)
{
	SWITCH_OFF;
 8ec:	93 98       	cbi	0x12, 3	; 18
	DDRD &= ~SWITCHES;					// Switches as Input => ext. Int 1
 8ee:	8b 98       	cbi	0x11, 3	; 17
	MCUCR &= ~((1 << ISC11) | (1 << ISC10));// Low level generates interrupt
 8f0:	85 b7       	in	r24, 0x35	; 53
 8f2:	83 7f       	andi	r24, 0xF3	; 243
 8f4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);					// Enable external Interrupt 1 
 8f6:	8b b7       	in	r24, 0x3b	; 59
 8f8:	80 68       	ori	r24, 0x80	; 128
 8fa:	8b bf       	out	0x3b, r24	; 59
}
 8fc:	08 95       	ret

000008fe <StopSwitch>:

void StopSwitch(void)
{
	GICR &= ~(1 << INT1);
 8fe:	8b b7       	in	r24, 0x3b	; 59
 900:	8f 77       	andi	r24, 0x7F	; 127
 902:	8b bf       	out	0x3b, r24	; 59
}
 904:	08 95       	ret

00000906 <Sleep>:

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
 906:	98 2f       	mov	r25, r24
	count72kHz = 0;
 908:	10 92 80 00 	sts	0x0080, r1
	while (count72kHz < time72kHz);
 90c:	80 91 80 00 	lds	r24, 0x0080
 910:	89 17       	cp	r24, r25
 912:	e0 f3       	brcs	.-8      	; 0x90c <Sleep+0x6>
}
 914:	08 95       	ret

00000916 <Msleep>:

/* MY MODS */
/*  */
void Msleep(unsigned int duration)
{
 916:	ac 01       	movw	r20, r24
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	08 c0       	rjmp	.+16     	; 0x92e <Msleep+0x18>
}

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
	count72kHz = 0;
 91e:	10 92 80 00 	sts	0x0080, r1
	while (count72kHz < time72kHz);
 922:	80 91 80 00 	lds	r24, 0x0080
 926:	88 34       	cpi	r24, 0x48	; 72
 928:	e0 f3       	brcs	.-8      	; 0x922 <Msleep+0xc>
{
	// Sleep(72) causes the processor to wait for 1ms.
	// This is because the processor has a 72kHz timer.
	// So duration is an expression of milliseconds.
	unsigned int i;
	for(i = 0; i < duration; i++)
 92a:	2f 5f       	subi	r18, 0xFF	; 255
 92c:	3f 4f       	sbci	r19, 0xFF	; 255
 92e:	24 17       	cp	r18, r20
 930:	35 07       	cpc	r19, r21
 932:	a8 f3       	brcs	.-22     	; 0x91e <Msleep+0x8>
	{
		Sleep(72);
	}
}
 934:	08 95       	ret

00000936 <GetTime>:
unsigned long GetTime()
{
	return ((timebase * 256) + count72kHz) / 72;
 936:	60 91 81 00 	lds	r22, 0x0081
 93a:	70 91 82 00 	lds	r23, 0x0082
 93e:	80 91 83 00 	lds	r24, 0x0083
 942:	90 91 84 00 	lds	r25, 0x0084
 946:	20 91 80 00 	lds	r18, 0x0080
 94a:	98 2f       	mov	r25, r24
 94c:	87 2f       	mov	r24, r23
 94e:	76 2f       	mov	r23, r22
 950:	66 27       	eor	r22, r22
 952:	62 0f       	add	r22, r18
 954:	71 1d       	adc	r23, r1
 956:	81 1d       	adc	r24, r1
 958:	91 1d       	adc	r25, r1
 95a:	28 e4       	ldi	r18, 0x48	; 72
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	40 e0       	ldi	r20, 0x00	; 0
 960:	50 e0       	ldi	r21, 0x00	; 0
 962:	00 d2       	rcall	.+1024   	; 0xd64 <__udivmodsi4>
 964:	ca 01       	movw	r24, r20
 966:	b9 01       	movw	r22, r18
 968:	08 95       	ret

0000096a <__subsf3>:
 96a:	50 58       	subi	r21, 0x80	; 128

0000096c <__addsf3>:
 96c:	bb 27       	eor	r27, r27
 96e:	aa 27       	eor	r26, r26
 970:	0e d0       	rcall	.+28     	; 0x98e <__addsf3x>
 972:	48 c1       	rjmp	.+656    	; 0xc04 <__fp_round>
 974:	39 d1       	rcall	.+626    	; 0xbe8 <__fp_pscA>
 976:	30 f0       	brcs	.+12     	; 0x984 <__addsf3+0x18>
 978:	3e d1       	rcall	.+636    	; 0xbf6 <__fp_pscB>
 97a:	20 f0       	brcs	.+8      	; 0x984 <__addsf3+0x18>
 97c:	31 f4       	brne	.+12     	; 0x98a <__addsf3+0x1e>
 97e:	9f 3f       	cpi	r25, 0xFF	; 255
 980:	11 f4       	brne	.+4      	; 0x986 <__addsf3+0x1a>
 982:	1e f4       	brtc	.+6      	; 0x98a <__addsf3+0x1e>
 984:	2e c1       	rjmp	.+604    	; 0xbe2 <__fp_nan>
 986:	0e f4       	brtc	.+2      	; 0x98a <__addsf3+0x1e>
 988:	e0 95       	com	r30
 98a:	e7 fb       	bst	r30, 7
 98c:	24 c1       	rjmp	.+584    	; 0xbd6 <__fp_inf>

0000098e <__addsf3x>:
 98e:	e9 2f       	mov	r30, r25
 990:	4a d1       	rcall	.+660    	; 0xc26 <__fp_split3>
 992:	80 f3       	brcs	.-32     	; 0x974 <__addsf3+0x8>
 994:	ba 17       	cp	r27, r26
 996:	62 07       	cpc	r22, r18
 998:	73 07       	cpc	r23, r19
 99a:	84 07       	cpc	r24, r20
 99c:	95 07       	cpc	r25, r21
 99e:	18 f0       	brcs	.+6      	; 0x9a6 <__addsf3x+0x18>
 9a0:	71 f4       	brne	.+28     	; 0x9be <__addsf3x+0x30>
 9a2:	9e f5       	brtc	.+102    	; 0xa0a <__addsf3x+0x7c>
 9a4:	62 c1       	rjmp	.+708    	; 0xc6a <__fp_zero>
 9a6:	0e f4       	brtc	.+2      	; 0x9aa <__addsf3x+0x1c>
 9a8:	e0 95       	com	r30
 9aa:	0b 2e       	mov	r0, r27
 9ac:	ba 2f       	mov	r27, r26
 9ae:	a0 2d       	mov	r26, r0
 9b0:	0b 01       	movw	r0, r22
 9b2:	b9 01       	movw	r22, r18
 9b4:	90 01       	movw	r18, r0
 9b6:	0c 01       	movw	r0, r24
 9b8:	ca 01       	movw	r24, r20
 9ba:	a0 01       	movw	r20, r0
 9bc:	11 24       	eor	r1, r1
 9be:	ff 27       	eor	r31, r31
 9c0:	59 1b       	sub	r21, r25
 9c2:	99 f0       	breq	.+38     	; 0x9ea <__addsf3x+0x5c>
 9c4:	59 3f       	cpi	r21, 0xF9	; 249
 9c6:	50 f4       	brcc	.+20     	; 0x9dc <__addsf3x+0x4e>
 9c8:	50 3e       	cpi	r21, 0xE0	; 224
 9ca:	68 f1       	brcs	.+90     	; 0xa26 <__addsf3x+0x98>
 9cc:	1a 16       	cp	r1, r26
 9ce:	f0 40       	sbci	r31, 0x00	; 0
 9d0:	a2 2f       	mov	r26, r18
 9d2:	23 2f       	mov	r18, r19
 9d4:	34 2f       	mov	r19, r20
 9d6:	44 27       	eor	r20, r20
 9d8:	58 5f       	subi	r21, 0xF8	; 248
 9da:	f3 cf       	rjmp	.-26     	; 0x9c2 <__addsf3x+0x34>
 9dc:	46 95       	lsr	r20
 9de:	37 95       	ror	r19
 9e0:	27 95       	ror	r18
 9e2:	a7 95       	ror	r26
 9e4:	f0 40       	sbci	r31, 0x00	; 0
 9e6:	53 95       	inc	r21
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__addsf3x+0x4e>
 9ea:	7e f4       	brtc	.+30     	; 0xa0a <__addsf3x+0x7c>
 9ec:	1f 16       	cp	r1, r31
 9ee:	ba 0b       	sbc	r27, r26
 9f0:	62 0b       	sbc	r22, r18
 9f2:	73 0b       	sbc	r23, r19
 9f4:	84 0b       	sbc	r24, r20
 9f6:	ba f0       	brmi	.+46     	; 0xa26 <__addsf3x+0x98>
 9f8:	91 50       	subi	r25, 0x01	; 1
 9fa:	a1 f0       	breq	.+40     	; 0xa24 <__addsf3x+0x96>
 9fc:	ff 0f       	add	r31, r31
 9fe:	bb 1f       	adc	r27, r27
 a00:	66 1f       	adc	r22, r22
 a02:	77 1f       	adc	r23, r23
 a04:	88 1f       	adc	r24, r24
 a06:	c2 f7       	brpl	.-16     	; 0x9f8 <__addsf3x+0x6a>
 a08:	0e c0       	rjmp	.+28     	; 0xa26 <__addsf3x+0x98>
 a0a:	ba 0f       	add	r27, r26
 a0c:	62 1f       	adc	r22, r18
 a0e:	73 1f       	adc	r23, r19
 a10:	84 1f       	adc	r24, r20
 a12:	48 f4       	brcc	.+18     	; 0xa26 <__addsf3x+0x98>
 a14:	87 95       	ror	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b7 95       	ror	r27
 a1c:	f7 95       	ror	r31
 a1e:	9e 3f       	cpi	r25, 0xFE	; 254
 a20:	08 f0       	brcs	.+2      	; 0xa24 <__addsf3x+0x96>
 a22:	b3 cf       	rjmp	.-154    	; 0x98a <__addsf3+0x1e>
 a24:	93 95       	inc	r25
 a26:	88 0f       	add	r24, r24
 a28:	08 f0       	brcs	.+2      	; 0xa2c <__addsf3x+0x9e>
 a2a:	99 27       	eor	r25, r25
 a2c:	ee 0f       	add	r30, r30
 a2e:	97 95       	ror	r25
 a30:	87 95       	ror	r24
 a32:	08 95       	ret

00000a34 <__divsf3>:
 a34:	0c d0       	rcall	.+24     	; 0xa4e <__divsf3x>
 a36:	e6 c0       	rjmp	.+460    	; 0xc04 <__fp_round>
 a38:	de d0       	rcall	.+444    	; 0xbf6 <__fp_pscB>
 a3a:	40 f0       	brcs	.+16     	; 0xa4c <__divsf3+0x18>
 a3c:	d5 d0       	rcall	.+426    	; 0xbe8 <__fp_pscA>
 a3e:	30 f0       	brcs	.+12     	; 0xa4c <__divsf3+0x18>
 a40:	21 f4       	brne	.+8      	; 0xa4a <__divsf3+0x16>
 a42:	5f 3f       	cpi	r21, 0xFF	; 255
 a44:	19 f0       	breq	.+6      	; 0xa4c <__divsf3+0x18>
 a46:	c7 c0       	rjmp	.+398    	; 0xbd6 <__fp_inf>
 a48:	51 11       	cpse	r21, r1
 a4a:	10 c1       	rjmp	.+544    	; 0xc6c <__fp_szero>
 a4c:	ca c0       	rjmp	.+404    	; 0xbe2 <__fp_nan>

00000a4e <__divsf3x>:
 a4e:	eb d0       	rcall	.+470    	; 0xc26 <__fp_split3>
 a50:	98 f3       	brcs	.-26     	; 0xa38 <__divsf3+0x4>

00000a52 <__divsf3_pse>:
 a52:	99 23       	and	r25, r25
 a54:	c9 f3       	breq	.-14     	; 0xa48 <__divsf3+0x14>
 a56:	55 23       	and	r21, r21
 a58:	b1 f3       	breq	.-20     	; 0xa46 <__divsf3+0x12>
 a5a:	95 1b       	sub	r25, r21
 a5c:	55 0b       	sbc	r21, r21
 a5e:	bb 27       	eor	r27, r27
 a60:	aa 27       	eor	r26, r26
 a62:	62 17       	cp	r22, r18
 a64:	73 07       	cpc	r23, r19
 a66:	84 07       	cpc	r24, r20
 a68:	38 f0       	brcs	.+14     	; 0xa78 <__divsf3_pse+0x26>
 a6a:	9f 5f       	subi	r25, 0xFF	; 255
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255
 a6e:	22 0f       	add	r18, r18
 a70:	33 1f       	adc	r19, r19
 a72:	44 1f       	adc	r20, r20
 a74:	aa 1f       	adc	r26, r26
 a76:	a9 f3       	breq	.-22     	; 0xa62 <__divsf3_pse+0x10>
 a78:	33 d0       	rcall	.+102    	; 0xae0 <__divsf3_pse+0x8e>
 a7a:	0e 2e       	mov	r0, r30
 a7c:	3a f0       	brmi	.+14     	; 0xa8c <__divsf3_pse+0x3a>
 a7e:	e0 e8       	ldi	r30, 0x80	; 128
 a80:	30 d0       	rcall	.+96     	; 0xae2 <__divsf3_pse+0x90>
 a82:	91 50       	subi	r25, 0x01	; 1
 a84:	50 40       	sbci	r21, 0x00	; 0
 a86:	e6 95       	lsr	r30
 a88:	00 1c       	adc	r0, r0
 a8a:	ca f7       	brpl	.-14     	; 0xa7e <__divsf3_pse+0x2c>
 a8c:	29 d0       	rcall	.+82     	; 0xae0 <__divsf3_pse+0x8e>
 a8e:	fe 2f       	mov	r31, r30
 a90:	27 d0       	rcall	.+78     	; 0xae0 <__divsf3_pse+0x8e>
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	88 1f       	adc	r24, r24
 a98:	bb 1f       	adc	r27, r27
 a9a:	26 17       	cp	r18, r22
 a9c:	37 07       	cpc	r19, r23
 a9e:	48 07       	cpc	r20, r24
 aa0:	ab 07       	cpc	r26, r27
 aa2:	b0 e8       	ldi	r27, 0x80	; 128
 aa4:	09 f0       	breq	.+2      	; 0xaa8 <__divsf3_pse+0x56>
 aa6:	bb 0b       	sbc	r27, r27
 aa8:	80 2d       	mov	r24, r0
 aaa:	bf 01       	movw	r22, r30
 aac:	ff 27       	eor	r31, r31
 aae:	93 58       	subi	r25, 0x83	; 131
 ab0:	5f 4f       	sbci	r21, 0xFF	; 255
 ab2:	2a f0       	brmi	.+10     	; 0xabe <__divsf3_pse+0x6c>
 ab4:	9e 3f       	cpi	r25, 0xFE	; 254
 ab6:	51 05       	cpc	r21, r1
 ab8:	68 f0       	brcs	.+26     	; 0xad4 <__divsf3_pse+0x82>
 aba:	8d c0       	rjmp	.+282    	; 0xbd6 <__fp_inf>
 abc:	d7 c0       	rjmp	.+430    	; 0xc6c <__fp_szero>
 abe:	5f 3f       	cpi	r21, 0xFF	; 255
 ac0:	ec f3       	brlt	.-6      	; 0xabc <__divsf3_pse+0x6a>
 ac2:	98 3e       	cpi	r25, 0xE8	; 232
 ac4:	dc f3       	brlt	.-10     	; 0xabc <__divsf3_pse+0x6a>
 ac6:	86 95       	lsr	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	b7 95       	ror	r27
 ace:	f7 95       	ror	r31
 ad0:	9f 5f       	subi	r25, 0xFF	; 255
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__divsf3_pse+0x74>
 ad4:	88 0f       	add	r24, r24
 ad6:	91 1d       	adc	r25, r1
 ad8:	96 95       	lsr	r25
 ada:	87 95       	ror	r24
 adc:	97 f9       	bld	r25, 7
 ade:	08 95       	ret
 ae0:	e1 e0       	ldi	r30, 0x01	; 1
 ae2:	66 0f       	add	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	bb 1f       	adc	r27, r27
 aea:	62 17       	cp	r22, r18
 aec:	73 07       	cpc	r23, r19
 aee:	84 07       	cpc	r24, r20
 af0:	ba 07       	cpc	r27, r26
 af2:	20 f0       	brcs	.+8      	; 0xafc <__divsf3_pse+0xaa>
 af4:	62 1b       	sub	r22, r18
 af6:	73 0b       	sbc	r23, r19
 af8:	84 0b       	sbc	r24, r20
 afa:	ba 0b       	sbc	r27, r26
 afc:	ee 1f       	adc	r30, r30
 afe:	88 f7       	brcc	.-30     	; 0xae2 <__divsf3_pse+0x90>
 b00:	e0 95       	com	r30
 b02:	08 95       	ret

00000b04 <__fixunssfsi>:
 b04:	98 d0       	rcall	.+304    	; 0xc36 <__fp_splitA>
 b06:	88 f0       	brcs	.+34     	; 0xb2a <__fixunssfsi+0x26>
 b08:	9f 57       	subi	r25, 0x7F	; 127
 b0a:	90 f0       	brcs	.+36     	; 0xb30 <__fixunssfsi+0x2c>
 b0c:	b9 2f       	mov	r27, r25
 b0e:	99 27       	eor	r25, r25
 b10:	b7 51       	subi	r27, 0x17	; 23
 b12:	a0 f0       	brcs	.+40     	; 0xb3c <__fixunssfsi+0x38>
 b14:	d1 f0       	breq	.+52     	; 0xb4a <__fixunssfsi+0x46>
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	1a f0       	brmi	.+6      	; 0xb26 <__fixunssfsi+0x22>
 b20:	ba 95       	dec	r27
 b22:	c9 f7       	brne	.-14     	; 0xb16 <__fixunssfsi+0x12>
 b24:	12 c0       	rjmp	.+36     	; 0xb4a <__fixunssfsi+0x46>
 b26:	b1 30       	cpi	r27, 0x01	; 1
 b28:	81 f0       	breq	.+32     	; 0xb4a <__fixunssfsi+0x46>
 b2a:	9f d0       	rcall	.+318    	; 0xc6a <__fp_zero>
 b2c:	b1 e0       	ldi	r27, 0x01	; 1
 b2e:	08 95       	ret
 b30:	9c c0       	rjmp	.+312    	; 0xc6a <__fp_zero>
 b32:	67 2f       	mov	r22, r23
 b34:	78 2f       	mov	r23, r24
 b36:	88 27       	eor	r24, r24
 b38:	b8 5f       	subi	r27, 0xF8	; 248
 b3a:	39 f0       	breq	.+14     	; 0xb4a <__fixunssfsi+0x46>
 b3c:	b9 3f       	cpi	r27, 0xF9	; 249
 b3e:	cc f3       	brlt	.-14     	; 0xb32 <__fixunssfsi+0x2e>
 b40:	86 95       	lsr	r24
 b42:	77 95       	ror	r23
 b44:	67 95       	ror	r22
 b46:	b3 95       	inc	r27
 b48:	d9 f7       	brne	.-10     	; 0xb40 <__fixunssfsi+0x3c>
 b4a:	3e f4       	brtc	.+14     	; 0xb5a <__fixunssfsi+0x56>
 b4c:	90 95       	com	r25
 b4e:	80 95       	com	r24
 b50:	70 95       	com	r23
 b52:	61 95       	neg	r22
 b54:	7f 4f       	sbci	r23, 0xFF	; 255
 b56:	8f 4f       	sbci	r24, 0xFF	; 255
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	08 95       	ret

00000b5c <__floatunsisf>:
 b5c:	e8 94       	clt
 b5e:	09 c0       	rjmp	.+18     	; 0xb72 <__floatsisf+0x12>

00000b60 <__floatsisf>:
 b60:	97 fb       	bst	r25, 7
 b62:	3e f4       	brtc	.+14     	; 0xb72 <__floatsisf+0x12>
 b64:	90 95       	com	r25
 b66:	80 95       	com	r24
 b68:	70 95       	com	r23
 b6a:	61 95       	neg	r22
 b6c:	7f 4f       	sbci	r23, 0xFF	; 255
 b6e:	8f 4f       	sbci	r24, 0xFF	; 255
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	99 23       	and	r25, r25
 b74:	a9 f0       	breq	.+42     	; 0xba0 <__floatsisf+0x40>
 b76:	f9 2f       	mov	r31, r25
 b78:	96 e9       	ldi	r25, 0x96	; 150
 b7a:	bb 27       	eor	r27, r27
 b7c:	93 95       	inc	r25
 b7e:	f6 95       	lsr	r31
 b80:	87 95       	ror	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b7 95       	ror	r27
 b88:	f1 11       	cpse	r31, r1
 b8a:	f8 cf       	rjmp	.-16     	; 0xb7c <__floatsisf+0x1c>
 b8c:	fa f4       	brpl	.+62     	; 0xbcc <__floatsisf+0x6c>
 b8e:	bb 0f       	add	r27, r27
 b90:	11 f4       	brne	.+4      	; 0xb96 <__floatsisf+0x36>
 b92:	60 ff       	sbrs	r22, 0
 b94:	1b c0       	rjmp	.+54     	; 0xbcc <__floatsisf+0x6c>
 b96:	6f 5f       	subi	r22, 0xFF	; 255
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	16 c0       	rjmp	.+44     	; 0xbcc <__floatsisf+0x6c>
 ba0:	88 23       	and	r24, r24
 ba2:	11 f0       	breq	.+4      	; 0xba8 <__floatsisf+0x48>
 ba4:	96 e9       	ldi	r25, 0x96	; 150
 ba6:	11 c0       	rjmp	.+34     	; 0xbca <__floatsisf+0x6a>
 ba8:	77 23       	and	r23, r23
 baa:	21 f0       	breq	.+8      	; 0xbb4 <__floatsisf+0x54>
 bac:	9e e8       	ldi	r25, 0x8E	; 142
 bae:	87 2f       	mov	r24, r23
 bb0:	76 2f       	mov	r23, r22
 bb2:	05 c0       	rjmp	.+10     	; 0xbbe <__floatsisf+0x5e>
 bb4:	66 23       	and	r22, r22
 bb6:	71 f0       	breq	.+28     	; 0xbd4 <__floatsisf+0x74>
 bb8:	96 e8       	ldi	r25, 0x86	; 134
 bba:	86 2f       	mov	r24, r22
 bbc:	70 e0       	ldi	r23, 0x00	; 0
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	2a f0       	brmi	.+10     	; 0xbcc <__floatsisf+0x6c>
 bc2:	9a 95       	dec	r25
 bc4:	66 0f       	add	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	da f7       	brpl	.-10     	; 0xbc2 <__floatsisf+0x62>
 bcc:	88 0f       	add	r24, r24
 bce:	96 95       	lsr	r25
 bd0:	87 95       	ror	r24
 bd2:	97 f9       	bld	r25, 7
 bd4:	08 95       	ret

00000bd6 <__fp_inf>:
 bd6:	97 f9       	bld	r25, 7
 bd8:	9f 67       	ori	r25, 0x7F	; 127
 bda:	80 e8       	ldi	r24, 0x80	; 128
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	60 e0       	ldi	r22, 0x00	; 0
 be0:	08 95       	ret

00000be2 <__fp_nan>:
 be2:	9f ef       	ldi	r25, 0xFF	; 255
 be4:	80 ec       	ldi	r24, 0xC0	; 192
 be6:	08 95       	ret

00000be8 <__fp_pscA>:
 be8:	00 24       	eor	r0, r0
 bea:	0a 94       	dec	r0
 bec:	16 16       	cp	r1, r22
 bee:	17 06       	cpc	r1, r23
 bf0:	18 06       	cpc	r1, r24
 bf2:	09 06       	cpc	r0, r25
 bf4:	08 95       	ret

00000bf6 <__fp_pscB>:
 bf6:	00 24       	eor	r0, r0
 bf8:	0a 94       	dec	r0
 bfa:	12 16       	cp	r1, r18
 bfc:	13 06       	cpc	r1, r19
 bfe:	14 06       	cpc	r1, r20
 c00:	05 06       	cpc	r0, r21
 c02:	08 95       	ret

00000c04 <__fp_round>:
 c04:	09 2e       	mov	r0, r25
 c06:	03 94       	inc	r0
 c08:	00 0c       	add	r0, r0
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__fp_round+0xc>
 c0c:	88 23       	and	r24, r24
 c0e:	52 f0       	brmi	.+20     	; 0xc24 <__fp_round+0x20>
 c10:	bb 0f       	add	r27, r27
 c12:	40 f4       	brcc	.+16     	; 0xc24 <__fp_round+0x20>
 c14:	bf 2b       	or	r27, r31
 c16:	11 f4       	brne	.+4      	; 0xc1c <__fp_round+0x18>
 c18:	60 ff       	sbrs	r22, 0
 c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__fp_round+0x20>
 c1c:	6f 5f       	subi	r22, 0xFF	; 255
 c1e:	7f 4f       	sbci	r23, 0xFF	; 255
 c20:	8f 4f       	sbci	r24, 0xFF	; 255
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	08 95       	ret

00000c26 <__fp_split3>:
 c26:	57 fd       	sbrc	r21, 7
 c28:	90 58       	subi	r25, 0x80	; 128
 c2a:	44 0f       	add	r20, r20
 c2c:	55 1f       	adc	r21, r21
 c2e:	59 f0       	breq	.+22     	; 0xc46 <__fp_splitA+0x10>
 c30:	5f 3f       	cpi	r21, 0xFF	; 255
 c32:	71 f0       	breq	.+28     	; 0xc50 <__fp_splitA+0x1a>
 c34:	47 95       	ror	r20

00000c36 <__fp_splitA>:
 c36:	88 0f       	add	r24, r24
 c38:	97 fb       	bst	r25, 7
 c3a:	99 1f       	adc	r25, r25
 c3c:	61 f0       	breq	.+24     	; 0xc56 <__fp_splitA+0x20>
 c3e:	9f 3f       	cpi	r25, 0xFF	; 255
 c40:	79 f0       	breq	.+30     	; 0xc60 <__fp_splitA+0x2a>
 c42:	87 95       	ror	r24
 c44:	08 95       	ret
 c46:	12 16       	cp	r1, r18
 c48:	13 06       	cpc	r1, r19
 c4a:	14 06       	cpc	r1, r20
 c4c:	55 1f       	adc	r21, r21
 c4e:	f2 cf       	rjmp	.-28     	; 0xc34 <__fp_split3+0xe>
 c50:	46 95       	lsr	r20
 c52:	f1 df       	rcall	.-30     	; 0xc36 <__fp_splitA>
 c54:	08 c0       	rjmp	.+16     	; 0xc66 <__fp_splitA+0x30>
 c56:	16 16       	cp	r1, r22
 c58:	17 06       	cpc	r1, r23
 c5a:	18 06       	cpc	r1, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	f1 cf       	rjmp	.-30     	; 0xc42 <__fp_splitA+0xc>
 c60:	86 95       	lsr	r24
 c62:	71 05       	cpc	r23, r1
 c64:	61 05       	cpc	r22, r1
 c66:	08 94       	sec
 c68:	08 95       	ret

00000c6a <__fp_zero>:
 c6a:	e8 94       	clt

00000c6c <__fp_szero>:
 c6c:	bb 27       	eor	r27, r27
 c6e:	66 27       	eor	r22, r22
 c70:	77 27       	eor	r23, r23
 c72:	cb 01       	movw	r24, r22
 c74:	97 f9       	bld	r25, 7
 c76:	08 95       	ret

00000c78 <__mulsf3>:
 c78:	0b d0       	rcall	.+22     	; 0xc90 <__mulsf3x>
 c7a:	c4 cf       	rjmp	.-120    	; 0xc04 <__fp_round>
 c7c:	b5 df       	rcall	.-150    	; 0xbe8 <__fp_pscA>
 c7e:	28 f0       	brcs	.+10     	; 0xc8a <__mulsf3+0x12>
 c80:	ba df       	rcall	.-140    	; 0xbf6 <__fp_pscB>
 c82:	18 f0       	brcs	.+6      	; 0xc8a <__mulsf3+0x12>
 c84:	95 23       	and	r25, r21
 c86:	09 f0       	breq	.+2      	; 0xc8a <__mulsf3+0x12>
 c88:	a6 cf       	rjmp	.-180    	; 0xbd6 <__fp_inf>
 c8a:	ab cf       	rjmp	.-170    	; 0xbe2 <__fp_nan>
 c8c:	11 24       	eor	r1, r1
 c8e:	ee cf       	rjmp	.-36     	; 0xc6c <__fp_szero>

00000c90 <__mulsf3x>:
 c90:	ca df       	rcall	.-108    	; 0xc26 <__fp_split3>
 c92:	a0 f3       	brcs	.-24     	; 0xc7c <__mulsf3+0x4>

00000c94 <__mulsf3_pse>:
 c94:	95 9f       	mul	r25, r21
 c96:	d1 f3       	breq	.-12     	; 0xc8c <__mulsf3+0x14>
 c98:	95 0f       	add	r25, r21
 c9a:	50 e0       	ldi	r21, 0x00	; 0
 c9c:	55 1f       	adc	r21, r21
 c9e:	62 9f       	mul	r22, r18
 ca0:	f0 01       	movw	r30, r0
 ca2:	72 9f       	mul	r23, r18
 ca4:	bb 27       	eor	r27, r27
 ca6:	f0 0d       	add	r31, r0
 ca8:	b1 1d       	adc	r27, r1
 caa:	63 9f       	mul	r22, r19
 cac:	aa 27       	eor	r26, r26
 cae:	f0 0d       	add	r31, r0
 cb0:	b1 1d       	adc	r27, r1
 cb2:	aa 1f       	adc	r26, r26
 cb4:	64 9f       	mul	r22, r20
 cb6:	66 27       	eor	r22, r22
 cb8:	b0 0d       	add	r27, r0
 cba:	a1 1d       	adc	r26, r1
 cbc:	66 1f       	adc	r22, r22
 cbe:	82 9f       	mul	r24, r18
 cc0:	22 27       	eor	r18, r18
 cc2:	b0 0d       	add	r27, r0
 cc4:	a1 1d       	adc	r26, r1
 cc6:	62 1f       	adc	r22, r18
 cc8:	73 9f       	mul	r23, r19
 cca:	b0 0d       	add	r27, r0
 ccc:	a1 1d       	adc	r26, r1
 cce:	62 1f       	adc	r22, r18
 cd0:	83 9f       	mul	r24, r19
 cd2:	a0 0d       	add	r26, r0
 cd4:	61 1d       	adc	r22, r1
 cd6:	22 1f       	adc	r18, r18
 cd8:	74 9f       	mul	r23, r20
 cda:	33 27       	eor	r19, r19
 cdc:	a0 0d       	add	r26, r0
 cde:	61 1d       	adc	r22, r1
 ce0:	23 1f       	adc	r18, r19
 ce2:	84 9f       	mul	r24, r20
 ce4:	60 0d       	add	r22, r0
 ce6:	21 1d       	adc	r18, r1
 ce8:	82 2f       	mov	r24, r18
 cea:	76 2f       	mov	r23, r22
 cec:	6a 2f       	mov	r22, r26
 cee:	11 24       	eor	r1, r1
 cf0:	9f 57       	subi	r25, 0x7F	; 127
 cf2:	50 40       	sbci	r21, 0x00	; 0
 cf4:	8a f0       	brmi	.+34     	; 0xd18 <__mulsf3_pse+0x84>
 cf6:	e1 f0       	breq	.+56     	; 0xd30 <__mulsf3_pse+0x9c>
 cf8:	88 23       	and	r24, r24
 cfa:	4a f0       	brmi	.+18     	; 0xd0e <__mulsf3_pse+0x7a>
 cfc:	ee 0f       	add	r30, r30
 cfe:	ff 1f       	adc	r31, r31
 d00:	bb 1f       	adc	r27, r27
 d02:	66 1f       	adc	r22, r22
 d04:	77 1f       	adc	r23, r23
 d06:	88 1f       	adc	r24, r24
 d08:	91 50       	subi	r25, 0x01	; 1
 d0a:	50 40       	sbci	r21, 0x00	; 0
 d0c:	a9 f7       	brne	.-22     	; 0xcf8 <__mulsf3_pse+0x64>
 d0e:	9e 3f       	cpi	r25, 0xFE	; 254
 d10:	51 05       	cpc	r21, r1
 d12:	70 f0       	brcs	.+28     	; 0xd30 <__mulsf3_pse+0x9c>
 d14:	60 cf       	rjmp	.-320    	; 0xbd6 <__fp_inf>
 d16:	aa cf       	rjmp	.-172    	; 0xc6c <__fp_szero>
 d18:	5f 3f       	cpi	r21, 0xFF	; 255
 d1a:	ec f3       	brlt	.-6      	; 0xd16 <__mulsf3_pse+0x82>
 d1c:	98 3e       	cpi	r25, 0xE8	; 232
 d1e:	dc f3       	brlt	.-10     	; 0xd16 <__mulsf3_pse+0x82>
 d20:	86 95       	lsr	r24
 d22:	77 95       	ror	r23
 d24:	67 95       	ror	r22
 d26:	b7 95       	ror	r27
 d28:	f7 95       	ror	r31
 d2a:	e7 95       	ror	r30
 d2c:	9f 5f       	subi	r25, 0xFF	; 255
 d2e:	c1 f7       	brne	.-16     	; 0xd20 <__mulsf3_pse+0x8c>
 d30:	fe 2b       	or	r31, r30
 d32:	88 0f       	add	r24, r24
 d34:	91 1d       	adc	r25, r1
 d36:	96 95       	lsr	r25
 d38:	87 95       	ror	r24
 d3a:	97 f9       	bld	r25, 7
 d3c:	08 95       	ret

00000d3e <__divmodhi4>:
 d3e:	97 fb       	bst	r25, 7
 d40:	09 2e       	mov	r0, r25
 d42:	07 26       	eor	r0, r23
 d44:	0a d0       	rcall	.+20     	; 0xd5a <__divmodhi4_neg1>
 d46:	77 fd       	sbrc	r23, 7
 d48:	04 d0       	rcall	.+8      	; 0xd52 <__divmodhi4_neg2>
 d4a:	2e d0       	rcall	.+92     	; 0xda8 <__udivmodhi4>
 d4c:	06 d0       	rcall	.+12     	; 0xd5a <__divmodhi4_neg1>
 d4e:	00 20       	and	r0, r0
 d50:	1a f4       	brpl	.+6      	; 0xd58 <__divmodhi4_exit>

00000d52 <__divmodhi4_neg2>:
 d52:	70 95       	com	r23
 d54:	61 95       	neg	r22
 d56:	7f 4f       	sbci	r23, 0xFF	; 255

00000d58 <__divmodhi4_exit>:
 d58:	08 95       	ret

00000d5a <__divmodhi4_neg1>:
 d5a:	f6 f7       	brtc	.-4      	; 0xd58 <__divmodhi4_exit>
 d5c:	90 95       	com	r25
 d5e:	81 95       	neg	r24
 d60:	9f 4f       	sbci	r25, 0xFF	; 255
 d62:	08 95       	ret

00000d64 <__udivmodsi4>:
 d64:	a1 e2       	ldi	r26, 0x21	; 33
 d66:	1a 2e       	mov	r1, r26
 d68:	aa 1b       	sub	r26, r26
 d6a:	bb 1b       	sub	r27, r27
 d6c:	fd 01       	movw	r30, r26
 d6e:	0d c0       	rjmp	.+26     	; 0xd8a <__udivmodsi4_ep>

00000d70 <__udivmodsi4_loop>:
 d70:	aa 1f       	adc	r26, r26
 d72:	bb 1f       	adc	r27, r27
 d74:	ee 1f       	adc	r30, r30
 d76:	ff 1f       	adc	r31, r31
 d78:	a2 17       	cp	r26, r18
 d7a:	b3 07       	cpc	r27, r19
 d7c:	e4 07       	cpc	r30, r20
 d7e:	f5 07       	cpc	r31, r21
 d80:	20 f0       	brcs	.+8      	; 0xd8a <__udivmodsi4_ep>
 d82:	a2 1b       	sub	r26, r18
 d84:	b3 0b       	sbc	r27, r19
 d86:	e4 0b       	sbc	r30, r20
 d88:	f5 0b       	sbc	r31, r21

00000d8a <__udivmodsi4_ep>:
 d8a:	66 1f       	adc	r22, r22
 d8c:	77 1f       	adc	r23, r23
 d8e:	88 1f       	adc	r24, r24
 d90:	99 1f       	adc	r25, r25
 d92:	1a 94       	dec	r1
 d94:	69 f7       	brne	.-38     	; 0xd70 <__udivmodsi4_loop>
 d96:	60 95       	com	r22
 d98:	70 95       	com	r23
 d9a:	80 95       	com	r24
 d9c:	90 95       	com	r25
 d9e:	9b 01       	movw	r18, r22
 da0:	ac 01       	movw	r20, r24
 da2:	bd 01       	movw	r22, r26
 da4:	cf 01       	movw	r24, r30
 da6:	08 95       	ret

00000da8 <__udivmodhi4>:
 da8:	aa 1b       	sub	r26, r26
 daa:	bb 1b       	sub	r27, r27
 dac:	51 e1       	ldi	r21, 0x11	; 17
 dae:	07 c0       	rjmp	.+14     	; 0xdbe <__udivmodhi4_ep>

00000db0 <__udivmodhi4_loop>:
 db0:	aa 1f       	adc	r26, r26
 db2:	bb 1f       	adc	r27, r27
 db4:	a6 17       	cp	r26, r22
 db6:	b7 07       	cpc	r27, r23
 db8:	10 f0       	brcs	.+4      	; 0xdbe <__udivmodhi4_ep>
 dba:	a6 1b       	sub	r26, r22
 dbc:	b7 0b       	sbc	r27, r23

00000dbe <__udivmodhi4_ep>:
 dbe:	88 1f       	adc	r24, r24
 dc0:	99 1f       	adc	r25, r25
 dc2:	5a 95       	dec	r21
 dc4:	a9 f7       	brne	.-22     	; 0xdb0 <__udivmodhi4_loop>
 dc6:	80 95       	com	r24
 dc8:	90 95       	com	r25
 dca:	bc 01       	movw	r22, r24
 dcc:	cd 01       	movw	r24, r26
 dce:	08 95       	ret

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
